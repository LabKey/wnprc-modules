package org.labkey.dbutils.api;

import com.google.common.base.Joiner;
import org.jetbrains.annotations.Nullable;
import org.labkey.api.data.JdbcType;
import org.labkey.api.data.SQLFragment;
import org.labkey.api.data.VirtualTable;
import org.labkey.api.query.ExprColumn;
import org.labkey.api.query.UserSchema;

import java.util.ArrayList;
import java.util.EnumSet;
import java.util.List;

/**
 * <h1>AbstractSimpleStaticTable</h1>
 *
 * This abstract table allows developers to define "static" tables that are defined in and generated by Java code.  It is
 * a good way to implement Enums in SQL, in a way that is easy to integrate with code.  This is similar to EnumTableInfo
 * except that it is much more flexible, allowing for whatever columns might be necessary.
 *
 * @author Jon Richardson
 */
abstract public class AbstractSimpleStaticTable<RowType extends Enum<RowType>, FieldSetEnumType extends Enum<FieldSetEnumType> & FieldSet<RowType>> extends VirtualTable<UserSchema> {
    public AbstractSimpleStaticTable(String name, @Nullable UserSchema userSchema) {
        super(userSchema.getDbSchema(), name, userSchema);

        addColumns();
    }

    private void addColumns() {
        if (getFieldSet() == null) {
            return;
        }

        for (FieldSetEnumType field : EnumSet.allOf(getFieldSet())) {
            ExprColumn column = new ExprColumn(this, field.name(), new SQLFragment(ExprColumn.STR_TABLE_ALIAS + "." + field.name().toString()), JdbcType.VARCHAR);
            addColumn(column);
        }
    }

    /**
     * This method defines the columns for the output columns for the static table.  It needs to return an enum class
     * that implements the FieldSet<RowType> interface, where RowType is an enum of any type that enumerates the rows
     * of the table.  In general, the FieldSet will include an entry called "key" that returns the name() of the enum.
     *
     * @return Class for Enum that implements FieldSet
     */
    protected abstract Class<FieldSetEnumType> getFieldSet();

    /**
     * This method returns the rows to pass to the values of getFieldSet() to get the values for the table.
     *
     * @return List<RowType> A list of rows for the table.  Usually this can be just RowTypeEnum.values(), but this
     * method allows you to filter out certain entries.
     */
    public abstract List<RowType> getEntries();

    @Override
    public SQLFragment getFromSQL() {
        SQLFragment sql = new SQLFragment();

        List<String> recordStatements = new ArrayList<>();
        for (RowType row : getEntries()) {
            SQLFragment line = new SQLFragment();

            List<String> fieldStatements = new ArrayList<>();
            for (FieldSetEnumType field : EnumSet.allOf(getFieldSet())) {
                String value = field.getValueForField(row);
                fieldStatements.add("'" + value + "' AS " + field.name());
            }

            line.append("SELECT " + Joiner.on(", ").join(fieldStatements));

            recordStatements.add(line.getRawSQL());
        }

        sql.append(Joiner.on("\nUNION\n").join(recordStatements));
        return sql;
    }

    @Override
    public boolean isPublic() {
        return true;
    }
}