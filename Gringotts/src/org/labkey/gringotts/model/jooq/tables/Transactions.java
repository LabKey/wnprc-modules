/**
 * This class is generated by jOOQ
 */
package org.labkey.gringotts.model.jooq.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.labkey.gringotts.model.jooq.Gringotts;
import org.labkey.gringotts.model.jooq.Keys;
import org.labkey.gringotts.model.jooq.tables.records.TransactionsRecord;


/**
 * This is the basic unit of the ledger.  Every update to the database is 
 * associated with a transaction.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transactions extends TableImpl<TransactionsRecord> {

    private static final long serialVersionUID = 1381190943;

    /**
     * The reference instance of <code>gringotts.transactions</code>
     */
    public static final Transactions TRANSACTIONS = new Transactions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionsRecord> getRecordType() {
        return TransactionsRecord.class;
    }

    /**
     * The column <code>gringotts.transactions.createdon</code>.
     */
    public final TableField<TransactionsRecord, Timestamp> CREATEDON = createField("createdon", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.TIMESTAMP)), this, "");

    /**
     * The column <code>gringotts.transactions.transactionid</code>.
     */
    public final TableField<TransactionsRecord, String> TRANSACTIONID = createField("transactionid", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gringotts.transactions.user</code>.
     */
    public final TableField<TransactionsRecord, Integer> USER = createField("user", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>gringotts.transactions.effectiveon</code>.
     */
    public final TableField<TransactionsRecord, Timestamp> EFFECTIVEON = createField("effectiveon", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>gringotts.transactions.comment</code>.
     */
    public final TableField<TransactionsRecord, String> COMMENT = createField("comment", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>gringotts.transactions</code> table reference
     */
    public Transactions() {
        this("transactions", null);
    }

    /**
     * Create an aliased <code>gringotts.transactions</code> table reference
     */
    public Transactions(String alias) {
        this(alias, TRANSACTIONS);
    }

    private Transactions(String alias, Table<TransactionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transactions(String alias, Table<TransactionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "This is the basic unit of the ledger.  Every update to the database is associated with a transaction.");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gringotts.GRINGOTTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionsRecord> getPrimaryKey() {
        return Keys.PK_TRANSACTIONS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionsRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionsRecord>>asList(Keys.PK_TRANSACTIONS, Keys.TRANSACTIONS_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Transactions as(String alias) {
        return new Transactions(alias, this);
    }

    /**
     * Rename this table
     */
    public Transactions rename(String name) {
        return new Transactions(name, null);
    }
}
