/**
 * This class is generated by jOOQ
 */
package org.labkey.gringotts.model.raw;


import javax.annotation.Generated;

import org.jooq.UniqueKey;
import org.jooq.impl.AbstractKeys;
import org.labkey.gringotts.model.raw.tables.Records;
import org.labkey.gringotts.model.raw.tables.Transactions;
import org.labkey.gringotts.model.raw.tables.VaultColumns;
import org.labkey.gringotts.model.raw.tables.VaultLinks;
import org.labkey.gringotts.model.raw.tables.VaultTextValues;
import org.labkey.gringotts.model.raw.tables.Vaults;
import org.labkey.gringotts.model.raw.tables.records.RecordsRecord;
import org.labkey.gringotts.model.raw.tables.records.TransactionsRecord;
import org.labkey.gringotts.model.raw.tables.records.VaultColumnsRecord;
import org.labkey.gringotts.model.raw.tables.records.VaultLinksRecord;
import org.labkey.gringotts.model.raw.tables.records.VaultTextValuesRecord;
import org.labkey.gringotts.model.raw.tables.records.VaultsRecord;


/**
 * A class modelling foreign key relationships between tables of the <code>gringotts</code> 
 * schema
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<RecordsRecord> PK_RECORDS = UniqueKeys0.PK_RECORDS;
    public static final UniqueKey<TransactionsRecord> PK_TRANSACTIONS = UniqueKeys0.PK_TRANSACTIONS;
    public static final UniqueKey<TransactionsRecord> TRANSACTIONS_ID_UNIQUE = UniqueKeys0.TRANSACTIONS_ID_UNIQUE;
    public static final UniqueKey<VaultColumnsRecord> PK_VAULT_COLUMNS = UniqueKeys0.PK_VAULT_COLUMNS;
    public static final UniqueKey<VaultLinksRecord> PK_VAULT_LINKS = UniqueKeys0.PK_VAULT_LINKS;
    public static final UniqueKey<VaultTextValuesRecord> PK_VAULT_TEXT_VALUES = UniqueKeys0.PK_VAULT_TEXT_VALUES;
    public static final UniqueKey<VaultsRecord> PK_VAULTS = UniqueKeys0.PK_VAULTS;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------


    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class UniqueKeys0 extends AbstractKeys {
        public static final UniqueKey<RecordsRecord> PK_RECORDS = createUniqueKey(Records.RECORDS, "pk_records", Records.RECORDS.VAULTID, Records.RECORDS.RECORDID, Records.RECORDS.CONTAINER, Records.RECORDS.VERSION);
        public static final UniqueKey<TransactionsRecord> PK_TRANSACTIONS = createUniqueKey(Transactions.TRANSACTIONS, "pk_transactions", Transactions.TRANSACTIONS.CREATEDON);
        public static final UniqueKey<TransactionsRecord> TRANSACTIONS_ID_UNIQUE = createUniqueKey(Transactions.TRANSACTIONS, "transactions_id_unique", Transactions.TRANSACTIONS.TRANSACTIONID);
        public static final UniqueKey<VaultColumnsRecord> PK_VAULT_COLUMNS = createUniqueKey(VaultColumns.VAULT_COLUMNS, "pk_vault_columns", VaultColumns.VAULT_COLUMNS.VAULTID, VaultColumns.VAULT_COLUMNS.VERSION, VaultColumns.VAULT_COLUMNS.COLUMNNAME);
        public static final UniqueKey<VaultLinksRecord> PK_VAULT_LINKS = createUniqueKey(VaultLinks.VAULT_LINKS, "pk_vault_links", VaultLinks.VAULT_LINKS.VAULTID1, VaultLinks.VAULT_LINKS.COLUMNID, VaultLinks.VAULT_LINKS.VAULTID2, VaultLinks.VAULT_LINKS.RECORD1, VaultLinks.VAULT_LINKS.RECORD2, VaultLinks.VAULT_LINKS.TRANSACTIONID);
        public static final UniqueKey<VaultTextValuesRecord> PK_VAULT_TEXT_VALUES = createUniqueKey(VaultTextValues.VAULT_TEXT_VALUES, "pk_vault_text_values", VaultTextValues.VAULT_TEXT_VALUES.VAULTID, VaultTextValues.VAULT_TEXT_VALUES.RECORDID, VaultTextValues.VAULT_TEXT_VALUES.CONTAINER, VaultTextValues.VAULT_TEXT_VALUES.COLUMNID, VaultTextValues.VAULT_TEXT_VALUES.TRANSACTIONID);
        public static final UniqueKey<VaultsRecord> PK_VAULTS = createUniqueKey(Vaults.VAULTS, "pk_vaults", Vaults.VAULTS.VAULTID);
    }
}
