/**
 * This class is generated by jOOQ
 */
package org.labkey.gringotts.model.raw.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.labkey.gringotts.model.raw.Gringotts;
import org.labkey.gringotts.model.raw.Keys;
import org.labkey.gringotts.model.raw.tables.records.RecordsRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Records extends TableImpl<RecordsRecord> {

    private static final long serialVersionUID = 1147663732;

    /**
     * The reference instance of <code>gringotts.records</code>
     */
    public static final Records RECORDS = new Records();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RecordsRecord> getRecordType() {
        return RecordsRecord.class;
    }

    /**
     * The column <code>gringotts.records.vaultid</code>.
     */
    public final TableField<RecordsRecord, String> VAULTID = createField("vaultid", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>gringotts.records.recordid</code>.
     */
    public final TableField<RecordsRecord, String> RECORDID = createField("recordid", org.jooq.impl.SQLDataType.CLOB.nullable(false).defaultValue(org.jooq.impl.DSL.field("dbutils.generate_base64_uuid()", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>gringotts.records.container</code>.
     */
    public final TableField<RecordsRecord, String> CONTAINER = createField("container", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>gringotts.records.version</code>.
     */
    public final TableField<RecordsRecord, Integer> VERSION = createField("version", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>gringotts.records.transactionid</code>.
     */
    public final TableField<RecordsRecord, String> TRANSACTIONID = createField("transactionid", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>gringotts.records</code> table reference
     */
    public Records() {
        this("records", null);
    }

    /**
     * Create an aliased <code>gringotts.records</code> table reference
     */
    public Records(String alias) {
        this(alias, RECORDS);
    }

    private Records(String alias, Table<RecordsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Records(String alias, Table<RecordsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Gringotts.GRINGOTTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RecordsRecord> getPrimaryKey() {
        return Keys.PK_RECORDS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RecordsRecord>> getKeys() {
        return Arrays.<UniqueKey<RecordsRecord>>asList(Keys.PK_RECORDS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Records as(String alias) {
        return new Records(alias, this);
    }

    /**
     * Rename this table
     */
    public Records rename(String name) {
        return new Records(name, null);
    }
}
