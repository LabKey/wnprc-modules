import org.labkey.gradle.util.BuildUtils
import org.labkey.gradle.util.ExternalDependency

dependencies {
    implementation "net.sf.opencsv:opencsv:${opencsvVersion}"
    implementation project(BuildUtils.getPlatformModuleProjectPath(project.gradle, "study"))
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:ehrModules:ehr", depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:LabDevKitModules:laboratory", depProjectConfig: "apiJarFile")
    implementation project(path: "${project.parent.path}:DBUtils", configuration: "apiJarFile")
    implementation project(path: "${project.parent.path}:WebUtils", configuration: "apiJarFile")
    implementation project(path: "${project.parent.path}:GoogleDrive", configuration: "apiJarFile")

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.apache.commons:commons-text:1.11.0",
            "Commons Text",
            "Apache",
            "https://commons.apache.org/proper/commons-text/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "String algorithms",
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.microsoft.ews-java-api:ews-java-api:2.0",
            "Exchange Web Services (EWS) Java API",
            "EWS Java API",
            "https://github.com/OfficeDev/ews-java-api",
            ExternalDependency.MIT_LICENSE_NAME,
            ExternalDependency.MIT_LICENSE_URL,
            "API for interacting with Exchange calendars"
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.google.api-client:google-api-client:${googleApiClientVersion}",
            "Google API Client Library for Java",
            "Google",
            "https://developers.google.com/api-client-library/java",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Library to interact with Google APIs"
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.google.apis:google-api-services-calendar:${googleApiServicesCalendarVersion}",
            "Google Calendar API Client Library for Java",
            "Google",
            "https://github.com/googleapis/google-api-java-client-services/tree/master/clients/google-api-services-calendar/v3",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Library for interacting with Google Calendars in Java"
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.google.auth:google-auth-library-oauth2-http:1.19.0",
            "Google Auth Library",
            "Google",
            "https://github.com/googleapis/google-auth-library-java",
            "BSD 3-Clause \"New\" or \"Revised\" License",
            "https://github.com/googleapis/google-auth-library-java/blob/main/LICENSE",
            "Contains a wide variety of credentials as well as utility methods to create them and to get Application Default Credentials"
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "com.google.http-client:google-http-client:${googleHttpClientVersion}",
            "GSON extensions to the Google HTTP Client Library for Java",
            "Google",
            "https://github.com/googleapis/google-http-java-client/tree/master/google-http-client-gson",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "A flexible, efficient, and powerful Java library for accessing any resource on the web via HTTP"
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "joda-time:joda-time:${jodaTimeVersion}",
            "Joda-Time",
            "Joda.org",
            "http://www.joda.org/joda-time/",
            ExternalDependency.APACHE_2_LICENSE_NAME,
            ExternalDependency.APACHE_2_LICENSE_URL,
            "Tools for dealing with dates/times in Java"
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.jsoup:jsoup:${jsoupVersion}",
            "jsoup: Java HTML Parser",
            "jsoup",
            "https://github.com/jhy/jsoup",
            ExternalDependency.MIT_LICENSE_NAME,
            ExternalDependency.MIT_LICENSE_URL,
            "Tools for parsing and manipulating HTML and CSS using the DOM"
        )
    )

    BuildUtils.addExternalDependency(
        project,
        new ExternalDependency(
            "org.reflections:reflections:0.10.2",
            "Reflections",
            "Reflections",
            "https://github.com/ronmamo/reflections",
            "WTFPL",
            "http://www.wtfpl.net/about/",
            "Runtime analysis of Java classes and packages"
        )
    )

    jspImplementation project(path: "${project.parent.path}:DBUtils",  configuration: "apiJarFile")
    jspImplementation project(path: "${project.parent.path}:WebUtils", configuration: "apiJarFile")
    jspImplementation "joda-time:joda-time:${jodaTimeVersion}"

    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:LabDevKitModules:LDK", depProjectConfig: 'published', depExtension: 'module')
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:ehrModules:ehr", depProjectConfig: 'published', depExtension: 'module')
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:ehrModules:Viral_Load_Assay", depProjectConfig: 'published', depExtension: 'module')
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: ":server:modules:dataintegration", depProjectConfig: 'published', depExtension: 'module')
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: "${project.parent.path}:DBUtils", depProjectConfig: 'published', depExtension: 'module')
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: "${project.parent.path}:WebUtils", depProjectConfig: 'published', depExtension: 'module')
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: "${project.parent.path}:GoogleDrive", depProjectConfig: 'published', depExtension: 'module')
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: "${project.parent.path}:WNPRC_Compliance", depProjectConfig: 'published', depExtension: 'module')

    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "study"), depProjectConfig: "apiJarFile")
    BuildUtils.addLabKeyDependency(project: project, config: "modules", depProjectPath: BuildUtils.getPlatformModuleProjectPath(project.gradle, "study"), depProjectConfig: "published", depExtension: "module")
    BuildUtils.addLabKeyDependency(project: project, config: "implementation", depProjectPath: ":server:modules:dataintegration", depProjectConfig: "apiJarFile")
}
configurations.all {
    Configuration config ->
        resolutionStrategy {
            force "org.javassist:javassist:${javassistVersion}"
        }
}

// Declare atypical npm build output directory for Gradle to correctly cache output
List.of(project.tasks.named("npm_run_build-prod"), project.tasks.named("npm_run_build"))
        .forEach(task -> task.configure {
            outputs.dir(project.file("./resources/web/gen"))
        })
