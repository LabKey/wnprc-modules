/***********************************************************************************************************************
 * wnprc-modules "main" build file
 *
 * This file is the "main" build definition for the wnprc-modules folders that lie under it, with the caveat that this
 * file itself is expected to be a subproject of the main _LabKey_ build. As such, the folder structure is assumed to
 * be as follows:
 *
 *   [labkey root]
 *     -> externalModules
 *       -> wnprc-modules (this folder)
 *         -> docker
 *         -> lib
 *         -> [module]
 *         -> [module]
 *         ...
 *
 * To include all the subprojects (including docker, which does get some special treatment later), add the following to
 * the top-level (LabKey root) settings.gradle file or to a "module set" in [labkey root]/gradle/settings:
 *
 *   include 'externalModules:wnprc-modules'
 *   file('externalModules/wnprc-modules').listFiles().findAll { d ->
 *     d.isDirectory() && (new File(d.getAbsolutePath(), 'build.gradle')).exists()
 *   }.each { d ->
 *     include "externalModules:wnprc-modules:${d.getName()}"
 *   }
 *
 * In case it is not immediately obvious, that code will add every subfolder containing a build.gradle file as a
 * subproject to the gradle build under the ":externalModules:wnprc-modules" project.
 *
 * Each module subproject (i.e., not docker) will automatically get the 'java' plugin (and corresponding sourceSets)
 * and a few module-specific tasks:
 *
 *   - createModuleXml
 *   - createModule
 *   - deployModule
 *   - undeployModule
 *
 * The "main" wnprc-modules build also has some tasks to manage all the modules:
 *
 *   - createModules
 *   - deployModules
 *   - undeployModules
 *
 **********************************************************************************************************************/

// using this to manage our node_modules and package.json in the base directory rather than module by module
apply plugin: 'com.moowork.node'

// using this to ignore the node_modules and other "base" folders in IntelliJ IDEA
apply plugin: 'idea'
idea.module {
    excludeDirs += file('node_modules')
}

// set up the LabKey artifactory and the local maven repository (~/.m2) as build sources. this would
// be of more use if we were building modules "externally" rather than inside the exising LabKey structure
allprojects {
    repositories {
        maven { url "${project.labkeyArtifactoryUrl}/libs-release" }
        maven { url "${project.labkeyArtifactoryUrl}/libs-snapshot" }
        mavenCentral()
        mavenLocal()
    }
}

def wnprcDir = project.projectDir
def modules  = subprojects - project('docker') - project('java2ts') - (project('distributions').subprojects)
configure(modules) {
    // tell IntelliJ to ignore any build directories
    apply plugin: 'idea'
    idea.module { excludeDirs += file('build') }

    if (file("${project.projectDir}/src").exists()) {
        apply from: "${wnprcDir}/gradle/java.gradle"
        apply plugin: 'org.labkey.module'
    } else {
        apply plugin: 'org.labkey.fileModule'
    }
    apply from: "${wnprcDir}/gradle/javascript.gradle"
}

task ("createModules",   group: "Build",  dependsOn: modules.collect { "${it.path}:module" },
        description: "Builds and jars the .module file for each subproject")
task ("deployModules",   group: "Deploy", dependsOn: modules.collect { "${it.path}:deployModule" },
        description: "Deploys all child modules")
task ("undeployModules", group: "Deploy", dependsOn: modules.collect { "${it.path}:undeployModule" },
        description: "Undeploys all child modules")
task ("cleanModules",    group: "Build",  dependsOn: modules.collect { "${it.path}:cleanModule" },
        description: "Cleans/unstages all child modules")