diff --git a/GoogleDrive/src/org/labkey/googledrive/GoogleDriveServiceImpl.java b/GoogleDrive/src/org/labkey/googledrive/GoogleDriveServiceImpl.java
index b5289ef1..1606410f 100644
--- a/GoogleDrive/src/org/labkey/googledrive/GoogleDriveServiceImpl.java
+++ b/GoogleDrive/src/org/labkey/googledrive/GoogleDriveServiceImpl.java
@@ -13,6 +13,10 @@ import org.apache.log4j.Logger;
 import org.json.JSONObject;
 import org.labkey.api.data.CompareType;
 import org.labkey.api.data.ContainerManager;
+import org.labkey.api.data.DbSchema;
+import org.labkey.api.data.DbSchemaType;
+import org.labkey.api.data.TableInfo;
+import org.labkey.api.data.TableSelector;
 import org.labkey.api.query.BatchValidationException;
 import org.labkey.api.query.DuplicateKeyException;
 import org.labkey.api.query.InvalidKeyException;
@@ -65,6 +69,11 @@ public class GoogleDriveServiceImpl extends GoogleDriveService {
         SimplerFilter filter = new SimplerFilter("id", CompareType.EQUAL, id);
         JSONObject[] rows = (new SimpleQueryFactory(user, ContainerManager.getHomeContainer())).selectRows("googledrive", "service_accounts", filter).toJSONObjectArray();
 
+        DbSchema schema = DbSchema.get("googledrive", DbSchemaType.Module);
+        TableInfo ti = schema.getTable("service_accounts");
+        TableSelector ts = new TableSelector(ti, filter, null);
+        Map<String, Object> serviceAccountMap = ts.getMap();
+
         if (rows.length == 0) {
             throw new NotFoundException();
         }
diff --git a/WNPRC_EHR/build.gradle b/WNPRC_EHR/build.gradle
index 9d3c9521..5333645d 100644
--- a/WNPRC_EHR/build.gradle
+++ b/WNPRC_EHR/build.gradle
@@ -11,4 +11,9 @@ dependencies {
     jspCompile project(path: "${project.parent.path}:DBUtils",  configuration: "apiCompile")
     jspCompile project("${project.parent.path}:WebUtils")
     jspCompile "joda-time:joda-time:2.9.3"
+    external 'com.google.api-client:google-api-client:1.23.0'
+    external 'com.google.oauth-client:google-oauth-client-jetty:1.23.0'
+    external 'com.google.apis:google-api-services-calendar:v3-rev296-1.23.0'
+    external 'com.google.api-client:google-api-client-gson:1.23.0'
+    external 'com.microsoft.ews-java-api:ews-java-api:2.0'
 }
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/SurgeryProcedureIndividualRequests.query.xml b/WNPRC_EHR/resources/queries/study/SurgeryProcedureIndividualRequests.query.xml
new file mode 100644
index 00000000..a62b071d
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/SurgeryProcedureIndividualRequests.query.xml
@@ -0,0 +1,109 @@
+<query xmlns="http://labkey.org/data/xml/query">
+    <metadata>
+        <tables xmlns="http://labkey.org/data/xml">
+            <tableTitle>Surgery/Procedure</tableTitle>
+            <table tableName="surgery_procedure" tableDbType="TABLE">
+                <javaCustomizer>org.labkey.ehr.table.DefaultEHRCustomizer</javaCustomizer>
+                <!--<tableUrl>/EHR/necropsyDetails.view?key=${objectid}</tableUrl>-->
+                <updateUrl>/ehr/manageRecord.view?schemaName=study&amp;queryName=surgery_procedure&amp;keyField=lsid&amp;key=${lsid}&amp;update=1</updateUrl>
+                <!--<importUrl/>-->
+                <!--<updateUrl/>-->
+                <!--<deleteUrl/>-->
+                <!--<titleColumn>rowid</titleColumn>-->
+                <columns>
+                    <column columnName="editLink">
+                        <columnTitle>Edit Link</columnTitle>
+                        <!--<url>/ehr/manageRecord.view?schemaName=study&amp;queryName=surgery_procedure&amp;keyField=lsid&amp;key=${lsid}&amp;update=1</url>-->
+                        <url>/EHR/dataEntryForm.view?formType=${formtype}&amp;requestid=${requestid}</url>
+                    </column>
+                    <column columnName="Id">
+                        <columnTitle>Animal ID</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="date">
+                        <columnTitle>Start Table Time</columnTitle>
+                        <formatString>yyyy-MM-dd HH:mm</formatString>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="enddate">
+                        <columnTitle>End Time</columnTitle>
+                        <formatString>yyyy-MM-dd HH:mm</formatString>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="procedureType">
+                        <columnTitle>Procedure Type</columnTitle>
+                        <fk>
+                            <fkDbSchema>wnprc</fkDbSchema>
+                            <fkTable>surgery_procedure_type</fkTable>
+                            <fkColumnName>type</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="procedureName">
+                        <columnTitle>Procedure Name</columnTitle>
+                        <fk>
+                            <fkDbSchema>wnprc</fkDbSchema>
+                            <fkTable>surgery_procedure_name</fkTable>
+                            <fkColumnName>name</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="location">
+                        <columnTitle>Location</columnTitle>
+                        <fk>
+                            <fkDbSchema>wnprc</fkDbSchema>
+                            <fkTable>surgery_procedure_rooms</fkTable>
+                            <fkColumnName>room</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="project">
+                        <columnTitle>Project</columnTitle>
+                        <fk>
+                            <fkDbSchema>ehr</fkDbSchema>
+                            <fkTable>project</fkTable>
+                            <fkColumnName>project</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="account">
+                        <columnTitle>Grant</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="surgeon">
+                        <columnTitle>Surgeon</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="consultRequest">
+                        <columnTitle>New Project / Consult Request</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="biopsyNeeded">
+                        <columnTitle>Necropsy/Biopsy Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="surgeryTechNeeded">
+                        <columnTitle>Surgery Tech Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="spiNeeded">
+                        <columnTitle>SPI Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="vetNeeded">
+                        <columnTitle>Vet Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="vetNeededReason">
+                        <columnTitle>Reason Vet is Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="statusChangeReason">
+                        <columnTitle>Hold/Deny Reason</columnTitle>
+                        <nullable>true</nullable>
+                    </column>
+                </columns>
+            </table>
+        </tables>
+    </metadata>
+</query>
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/SurgeryProcedureIndividualRequests.sql b/WNPRC_EHR/resources/queries/study/SurgeryProcedureIndividualRequests.sql
new file mode 100644
index 00000000..74121838
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/SurgeryProcedureIndividualRequests.sql
@@ -0,0 +1,9 @@
+SELECT 'EDIT' as editLink,participantid,date,enddate,proceduretype,procedurename,location,project,account,
+      surgeon,consultRequest,biopsyNeeded,surgerytechneeded,spineeded,vetneeded,statuschangereason,qcstate,
+      requestid,(select formtype from ehr.requests where requestid = sp.requestid) as formtype
+FROM study.surgery_procedure sp
+WHERE sp.requestid IN
+      (SELECT r.requestid FROM ehr.requests r
+      WHERE ISMEMBEROF(r.createdby) AND r.formtype in ('SurgeryProcedureRequest', 'SurgeryProcedureMultipleRequest') AND r.qcstate in (7,12));
+
+--SELECT * FROM ehr.requests
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/SurgeryProcedureRequests.sql b/WNPRC_EHR/resources/queries/study/SurgeryProcedureRequests.sql
new file mode 100644
index 00000000..6c54b659
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/SurgeryProcedureRequests.sql
@@ -0,0 +1,29 @@
+/*
+ * This query represents all outstanding requests that need to be approved
+ */
+
+SELECT
+  lsid,
+  requestid,
+  requestid.rowid as rowid,
+  objectid,
+  proceduretype,
+  procedurename,
+  taskid,
+  Id as animalid,
+  date,
+  enddate,
+  created,
+  project,
+  account,
+  location,
+  requestid.qcstate as state,
+  createdby.displayname as requestor,
+  requestid.priority as priority,
+--   linktoexisting,
+--   linkedrequest,
+  comments,
+  statuschangereason
+
+FROM study.surgery_procedure
+WHERE requestid IS NOT NULL
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/SurgeryProcedureRequests/pending.qview.xml b/WNPRC_EHR/resources/queries/study/SurgeryProcedureRequests/pending.qview.xml
new file mode 100644
index 00000000..b3d677bd
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/SurgeryProcedureRequests/pending.qview.xml
@@ -0,0 +1,6 @@
+<customView xmlns="http://labkey.org/data/xml/queryCustomView">
+    <filters>
+        <!-- filter for "Request: Pending" (5) -->
+        <filter column="state" operator="eq" value="5" />
+    </filters>
+</customView>
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/SurgeryProcedureSchedule.sql b/WNPRC_EHR/resources/queries/study/SurgeryProcedureSchedule.sql
new file mode 100644
index 00000000..2ebb2097
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/SurgeryProcedureSchedule.sql
@@ -0,0 +1,40 @@
+/* This query feeds the Surgery Schedule JSP page/calendar. */
+SELECT lsid
+  ,objectid
+  ,requestid
+  ,a.taskid                        AS taskid
+  ,animalid
+  ,animalid.Demographics.gender    AS sex
+  ,animalid.age.ageFriendly        AS age
+  ,animalid.Demographics.weight    AS weight
+  ,animalid.Demographics.medical   AS medical
+  ,animalid.curLocation.room       AS cur_room
+  ,animalid.curLocation.cage       AS cur_cage
+  ,animalid.curLocation.cond.title AS cur_cond
+  ,date
+  ,enddate
+  ,proceduretype
+  ,created
+  ,project
+  ,protocol
+  ,account
+  ,location
+  ,state
+  ,statuschangereason
+FROM (SELECT lsid
+        ,objectid
+        ,requestid
+        ,taskid.rowid     AS taskid
+        ,Id               AS animalid
+        ,date
+        ,enddate
+        ,proceduretype
+        ,created
+        ,project
+        ,project.protocol AS protocol
+        ,account
+        ,location
+        ,taskid.qcstate   AS state
+        ,statuschangereason
+      FROM study.surgery_procedure
+      WHERE taskid IS NOT NULL) a
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/surgery_procedure.js b/WNPRC_EHR/resources/queries/study/surgery_procedure.js
new file mode 100644
index 00000000..75f944f7
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/surgery_procedure.js
@@ -0,0 +1,64 @@
+var console = require("console");
+require("ehr/triggers").initScript(this);
+require("labkey");
+
+//FYI: Get's called on every single key press!
+function onInit(event, helper){
+    // console.log('onInit');
+    // helper.registerRowProcessor(function(helper, row) {
+    //     if (!row)
+    //         return;
+    //
+    //     if (!row.requestId || !row.protocol)
+    //     {
+    //         return;
+    //     }
+    // })
+
+}
+//
+// function onBeforeInsert(row, errors){
+//     // if (this.extraContext.targetQC) {
+//     //     row.QCStateLabel = this.extraContext.targetQC;
+//     // }
+//     console.log('onBeforeInsert');
+//     console.log('row: ' + JSON.stringify(row));
+//     //EHR.Server.Utils.onFailure;
+// }
+//
+// function onAfterInsert(row, errors) {
+//     console.log('onAfterInsert');
+//     console.log('row: ' + JSON.stringify(row));
+// }
+//
+// function onBeforeUpdate(row, errors) {
+//     console.log('onBeforeUpdate');
+//     console.log('row: ' + JSON.stringify(row));
+// }
+//
+// function onAfterUpdate(row, errors) {
+//     console.log('onAfterUpdate');
+//     console.log('row: ' + JSON.stringify(row));
+// }
+//
+// function onInsert(row, errors) {
+//     console.log('onInsert');
+//     console.log('row: ' + JSON.stringify(row));
+// }
+
+function onInsert(helper, scriptErrors, row, oldRow) {
+
+}
+
+function onUpsert(helper, scriptErrors, row, oldRow){
+
+}
+
+// function onUpdate(row, errors) {
+//     console.log('onUpdate');
+//     console.log('row: ' + JSON.stringify(row));
+// }
+//
+// function onComplete(event,errors, helper) {
+//     console.log('onComplete');
+// }
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/surgery_procedure.query.xml b/WNPRC_EHR/resources/queries/study/surgery_procedure.query.xml
new file mode 100644
index 00000000..cd553722
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/surgery_procedure.query.xml
@@ -0,0 +1,116 @@
+<query xmlns="http://labkey.org/data/xml/query">
+    <metadata>
+        <tables xmlns="http://labkey.org/data/xml">
+            <tableTitle>Surgery/Procedure</tableTitle>
+            <table tableName="surgery_procedure" tableDbType="TABLE">
+                <javaCustomizer>org.labkey.ehr.table.DefaultEHRCustomizer</javaCustomizer>
+                <!--<tableUrl>/EHR/necropsyDetails.view?key=${objectid}</tableUrl>-->
+                <!--<insertUrl/>-->
+                <!--<importUrl/>-->
+                <!--<updateUrl/>-->
+                <!--<deleteUrl/>-->
+                <!--<titleColumn>rowid</titleColumn>-->
+                <columns>
+                    <column columnName="Id">
+                        <columnTitle>Animal ID</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="date">
+                        <columnTitle>Start Table Time</columnTitle>
+                        <formatString>yyyy-MM-dd HH:mm</formatString>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="enddate">
+                        <columnTitle>End Time</columnTitle>
+                        <formatString>yyyy-MM-dd HH:mm</formatString>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="procedureType">
+                        <columnTitle>Procedure Type</columnTitle>
+                        <fk>
+                            <fkDbSchema>wnprc</fkDbSchema>
+                            <fkTable>surgery_procedure_type</fkTable>
+                            <fkColumnName>type</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="procedureName">
+                        <columnTitle>Procedure Name</columnTitle>
+                        <fk>
+                            <fkDbSchema>wnprc</fkDbSchema>
+                            <fkTable>surgery_procedure_name</fkTable>
+                            <fkColumnName>name</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="location">
+                        <columnTitle>Location</columnTitle>
+                        <fk>
+                            <fkDbSchema>wnprc</fkDbSchema>
+                            <fkTable>surgery_procedure_rooms</fkTable>
+                            <fkColumnName>room</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="project">
+                        <columnTitle>Project</columnTitle>
+                        <fk>
+                            <fkDbSchema>ehr</fkDbSchema>
+                            <fkTable>project</fkTable>
+                            <fkColumnName>project</fkColumnName>
+                        </fk>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="account">
+                        <columnTitle>Grant</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="surgeon">
+                        <columnTitle>Surgeon</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="consultRequest">
+                        <columnTitle>New Project / Consult Request</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="biopsyNeeded">
+                        <columnTitle>Necropsy/Biopsy Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="surgeryTechNeeded">
+                        <columnTitle>Surgery Tech Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="spiNeeded">
+                        <columnTitle>SPI Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="vetNeeded">
+                        <columnTitle>Vet Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="vetNeededReason">
+                        <columnTitle>Reason Vet is Needed</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="equipment">
+                        <columnTitle>Special Equipment/Supplies Requested</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="drugsLab">
+                        <columnTitle>Drugs Lab Will Provide</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="drugsSurgery">
+                        <columnTitle>Drugs Surgery Staff Requested to Provide</columnTitle>
+                        <nullable>false</nullable>
+                    </column>
+                    <column columnName="comments">
+                        <columnTitle>Comments</columnTitle>
+                        <nullable>true</nullable>
+                    </column>
+                </columns>
+            </table>
+        </tables>
+    </metadata>
+</query>
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/queries/study/surgery_procedure/.qview.xml b/WNPRC_EHR/resources/queries/study/surgery_procedure/.qview.xml
new file mode 100644
index 00000000..a4d47e2e
--- /dev/null
+++ b/WNPRC_EHR/resources/queries/study/surgery_procedure/.qview.xml
@@ -0,0 +1,21 @@
+<customView xmlns="http://labkey.org/data/xml/queryCustomView">
+    <columns>
+        <column name="Id"/>
+        <column name="date"/>
+        <column name="enddate"/>
+        <column name="project"/>
+        <column name="account"/>
+        <column name="surgeon"/>
+        <column name="major"/>
+        <column name="remark"/>
+        <!--<column name="description"/>-->
+        <column name="qcstate" />
+        <column name="taskid" />
+    </columns>
+    <sorts>
+        <sort column="date" descending="true"/>
+    </sorts>
+    <!--<filters>-->
+    <!--<filter column="qcstate/publicdata" operator="eq" value="true"/>-->
+    <!--</filters>-->
+</customView>
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/schemas/dbscripts/postgresql/wnprc-15.13-15.14.sql b/WNPRC_EHR/resources/schemas/dbscripts/postgresql/wnprc-15.13-15.14.sql
new file mode 100644
index 00000000..ff39a6d0
--- /dev/null
+++ b/WNPRC_EHR/resources/schemas/dbscripts/postgresql/wnprc-15.13-15.14.sql
@@ -0,0 +1,48 @@
+DROP TABLE IF EXISTS wnprc.surgery_procedure_rooms;
+CREATE TABLE wnprc.surgery_procedure_rooms(
+  room VARCHAR(50),
+  displayname VARCHAR(100),
+  type VARCHAR(50),
+  email VARCHAR(50),
+  -- Default fields for LabKey.
+  container  entityid NOT NULL,
+  createdby  userid,
+  created    TIMESTAMP,
+  modifiedby userid,
+  modified   TIMESTAMP,
+
+  CONSTRAINT pk_surgery_procedure_rooms PRIMARY KEY (room)
+);
+
+DROP TABLE IF EXISTS wnprc.surgery_procedure_type;
+CREATE TABLE wnprc.surgery_procedure_type(
+  displayname VARCHAR(50),
+  type VARCHAR(50),
+  -- Default fields for LabKey.
+  container  entityid NOT NULL,
+  createdby  userid,
+  created    TIMESTAMP,
+  modifiedby userid,
+  modified   TIMESTAMP,
+
+  CONSTRAINT pk_surgery_procedure_type PRIMARY KEY (type)
+);
+
+DROP TABLE IF EXISTS wnprc.surgery_procedure_name;
+CREATE TABLE wnprc.surgery_procedure_name(
+  displayname VARCHAR(50),
+  name VARCHAR(50),
+  type VARCHAR(50),
+  -- Default fields for LabKey.
+  container  entityid NOT NULL,
+  createdby  userid,
+  created    TIMESTAMP,
+  modifiedby userid,
+  modified   TIMESTAMP,
+
+  CONSTRAINT pk_surgery_procedure_name PRIMARY KEY (name)
+);
+
+DELETE FROM study.qcstate WHERE label = 'Request: On Hold';
+INSERT INTO study.qcstate (label,description,container,publicdata)
+  VALUES ('Request: On Hold', 'Request has been put on hold', '29e3860b-02b5-102d-b524-493dbd27b599', FALSE);
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/views/dataEntry.html b/WNPRC_EHR/resources/views/dataEntry.html
index a88daf54..9e2769f3 100644
--- a/WNPRC_EHR/resources/views/dataEntry.html
+++ b/WNPRC_EHR/resources/views/dataEntry.html
@@ -381,6 +381,21 @@ Ext.onReady(function(){
                         title:   'Schedule Necropsy',
                         queries: ['Necropsies']
                     },
+                    {
+                        url:     makeExt4DataEntryURL("SurgeryProcedureRequest"),
+                        title:   'Request Surgery/Procedure',
+                        queries: ['surgery_procedure']
+                    },
+                    {
+                        url:     makeExt4DataEntryURL("SurgeryProcedureMultipleRequest"),
+                        title:   'Request Multiple Surgery/Procedure',
+                        queries: ['surgery_procedure']
+                    },
+                    {
+                        url:     LABKEY.ActionURL.buildURL('wnprc_ehr', 'SurgeryProcedureSchedule', ctx['EHRStudyContainer']),
+                        title:   'Schedule Surgery/Procedure',
+                        queries: ['surgery_procedure']
+                    },
                     {
                         url:  makeExt4DataEntryURL("Food Deprive Request"),
                         title: 'Request Food Deprives',
@@ -452,6 +467,11 @@ Ext.onReady(function(){
                 VVCDeleteURL = '/query/deleteQueryRows.view?schemaName=wnprc&query.queryName=vvc';
             }
 
+            var SurgeryProcedureUpdateURL = '/ehr/manageRecord.view?schemaName=study&queryName=surgery_procedure&keyField=lsid&key=${lsid}&update=1';
+            if(EHR.Security.hasPermission('Request: Approved', 'admin', {queryName: 'Blood Draws', schemaName: 'study'})){
+                SurgeryProcedureUpdateURL = '/ehr/manageRecord.view?schemaName=study&queryName=surgery_procedure&keyField=lsid&key=${lsid}&update=1';
+            }
+
             var AnimalRequestUpdateURL = '';
             var AnimalRequestDeleteURL = '';
             if (EHR.Security.hasPermission('Request: Approved', 'admin', {queryName: 'vvc', schemaName: 'wnprc'})){
@@ -690,6 +710,24 @@ Ext.onReady(function(){
                                                     success: onSuccess
                                                 }
                                             },
+                                            {
+                                                title: 'Surgery/Procedure Requests',
+                                                ref: 'SurgeryProcedureRequests',
+                                                itemId: 'SurgeryProcedureRequests',
+                                                xtype: 'ehr-qwppanel',
+                                                queryConfig: {
+                                                    schemaName: 'study',
+                                                    queryName: 'SurgeryProcedureIndividualRequests',
+                                                    //viewName: 'Surgery/Procedure Requests',
+                                                    updateURL: SurgeryProcedureUpdateURL,
+                                                    deleteURL: '',
+                                                    scope: this,
+                                                    success: onSuccess
+                                                    /*filters: [
+                                                        LABKEY.Filter.create('qcstate', 7, LABKEY.Filter.Types.EQUAL)
+                                                    ]*/
+                                                }
+                                            },
                                             {
                                                 title: 'Animal Requests',
                                                 ref: 'AnimalRequests',
@@ -704,8 +742,7 @@ Ext.onReady(function(){
                                                     scope: this,
                                                     success: onSuccess
                                                 }
-                                            },
-
+                                            }
                                         ]
                                     }
                                 ]
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/dataentry.lib.xml b/WNPRC_EHR/resources/web/wnprc_ehr/dataentry.lib.xml
index ce325550..33916685 100644
--- a/WNPRC_EHR/resources/web/wnprc_ehr/dataentry.lib.xml
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/dataentry.lib.xml
@@ -11,6 +11,8 @@
         <script path="/wnprc_ehr/model/sources/MPR.js"/>
         <script path="/wnprc_ehr/model/sources/Necropsy.js"/>
         <script path="/wnprc_ehr/model/sources/NecropsyRequest.js"/>
+        <script path="/wnprc_ehr/model/sources/SurgeryProcedureRequest.js"/>
+        <script path="/wnprc_ehr/model/sources/SurgeryProcedureMultipleRequest.js"/>
         <script path="/wnprc_ehr/model/sources/NecropsyTask.js"/>
         <script path="/wnprc_ehr/model/sources/NewAnimal.js"/>
         <script path="/wnprc_ehr/model/sources/Pathology.js"/>
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/Procedure.js b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/Procedure.js
new file mode 100644
index 00000000..bdfcbfb4
--- /dev/null
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/Procedure.js
@@ -0,0 +1,17 @@
+Ext4.define('WNPRC.ext.plugins.ProcedureField', {
+    extend: 'Ext4.util.Observable',
+    alias: 'plugin.wnprc-procedurefield',
+
+    init: function(component) {
+        var PROCEDURE_CHANGE_EVENT = 'procedurechange';
+
+        component.addEvents(PROCEDURE_CHANGE_EVENT);
+        component.enableBubble(PROCEDURE_CHANGE_EVENT);
+
+        component.on('change', function(field, val, oldVal) {
+            component.fireEvent(PROCEDURE_CHANGE_EVENT, val);
+            //TODO remove this!
+            //alert('test');
+        }, this, {buffer: 200});
+    }
+});
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/fields/SurgeryProcedureNameField.js b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/fields/SurgeryProcedureNameField.js
new file mode 100644
index 00000000..4f95408f
--- /dev/null
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/fields/SurgeryProcedureNameField.js
@@ -0,0 +1,134 @@
+Ext4.define('WNPRC.ext.components.SurgeryProcedureNameField', {
+    extend: 'Ext.form.field.ComboBox',
+    alias: 'widget.wnprc-surgeryprocedurenamefield',
+
+    initComponent: function () {
+        Ext4.apply(this, {
+            displayField: 'displayname',
+            valueField: 'name',
+            queryMode: 'local',
+            forceSelection: true,
+            matchFieldWidth: true,
+            store: {
+                type: 'labkey-store',
+                schemaName: 'wnprc',
+                sql: this.makeSql(),
+                sort: 'name',
+                autoLoad: false,
+                loading: true,
+                listeners: {
+                    scope: this,
+                    delay: 50,
+                    load: function(store){
+                        this.resolveProcedureNameFromStore();
+                        this.getPicker().refresh();
+                    }
+                }
+
+            },
+            listeners: {
+                beforerender: function (field) {
+                    var target = field.up('form');
+                    if (!target) {
+                        target = field.up('grid');
+                    }
+
+                    LDK.Assert.assertNotEmpty('Unable to find form or grid', target);
+                    if (target) {
+                        field.mon(target, 'procedurechange', field.updateDropdown, field);
+                    }
+                    else {
+                        console.error('Unable to find target');
+                    }
+                    this.updateDropdown();
+                }
+            },
+            anyMatch: true,
+            caseSensitive: false
+        });
+
+        this.callParent(arguments);
+    },
+
+    // trigger1Cls: 'x4-form-search-trigger',
+    //
+    // onTrigger1Click: function(){
+    //     var boundRecord = EHR.DataEntryUtils.getBoundRecord(this);
+    //     if (!boundRecord){
+    //         Ext4.Msg.alert('Error', 'Unable to locate associated animal Id');
+    //         return;
+    //     }
+    //
+    //     var procedure_type = boundRecord.get('procedureType');
+    //     if (!procedure_type){
+    //         Ext4.Msg.alert('Error', 'No Procedure Type Selected');
+    //         return;
+    //     }
+    //
+    //     this.updateDropdown(procedure_type);
+    // },
+
+    updateDropdown: function (procedure_type) {
+        var boundRecord = EHR.DataEntryUtils.getBoundRecord(this);
+        if (!boundRecord){
+            console.warn('no bound record found');
+        }
+
+        if (boundRecord && boundRecord.store){
+            LDK.Assert.assertNotEmpty('SurgeryProcedureNameField is being used on a store that lacks an Id field: ' + boundRecord.store.storeId, boundRecord.fields.get('Id'));
+        }
+
+        if (!procedure_type && boundRecord)
+            procedure_type = boundRecord.get('procedureType');
+
+        this.emptyText = 'Select procedure...';
+
+        var sql = this.makeSql(procedure_type);
+        this.store.sql = sql;
+        this.store.removeAll();
+        this.store.load();
+    },
+
+    makeSql(procedure_type) {
+        var sql = 'select name,displayname from wnprc.surgery_procedure_name';
+        console.log('procedure_type: ' + procedure_type);
+        if (procedure_type && procedure_type.length > 0) {
+            sql += ' where type = \'' + procedure_type.toLowerCase() + '\'';
+        } else {
+            sql += ' where type = \'\'';
+        }
+        return sql;
+    },
+
+    resolveProcedureNameFromStore: function(){
+        var val = this.getValue();
+        if (!val || this.isDestroyed)
+            return;
+
+        LDK.Assert.assertNotEmpty('Unable to find store in SurgeryProcedureNameField', this.store);
+        var rec = this.store ? this.store.findRecord('procedureName', val) : null;
+        if (rec){
+            return;
+        }
+
+        rec = this.allProjectStore.findRecord('procedureName', val);
+        if (rec){
+            var newRec = this.store.createModel({});
+            newRec.set({
+                project: rec.data.project,
+                account: rec.data.account,
+                displayName: rec.data.displayName,
+                protocolDisplayName: rec.data['protocol/displayName'],
+                protocol: rec.data.protocol,
+                title: rec.data.title,
+                //      investigator: rec.data['investigatorId/lastName'],
+                isAssigned: 0,
+                fromClient: true
+            });
+
+            this.store.insert(0, newRec);
+
+            return newRec;
+        }
+    }
+});
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/fields/SurgeryProcedureRoomField.js b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/fields/SurgeryProcedureRoomField.js
new file mode 100644
index 00000000..7d078921
--- /dev/null
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/components/fields/SurgeryProcedureRoomField.js
@@ -0,0 +1,78 @@
+Ext4.define('WNPRC.ext.components.SurgeryProcedureRoomField', {
+    extend: 'Ext.form.field.ComboBox',
+    alias: 'widget.wnprc-surgeryprocedureroomfield',
+
+    initComponent: function () {
+        Ext4.apply(this, {
+            displayField: 'displayname',
+            valueField: 'room',
+            queryMode: 'local',
+            forceSelection: true,
+            matchFieldWidth: true,
+            store: {
+                type: 'labkey-store',
+                schemaName: 'wnprc',
+                sql: this.makeSql(),
+                sort: 'room',
+                autoLoad: true
+
+            },
+            listeners: {
+                beforerender: function (field) {
+                    var isForm = true;
+                    var target = field.up('form');
+                    if (!target) {
+                        target = field.up('grid');
+                        isForm = false;
+                    }
+
+                    LDK.Assert.assertNotEmpty('Unable to find form or grid', target);
+                    if (target) {
+                        field.mon(target, 'procedurechange', field.updateDropdown, field);
+                    }
+                    else {
+                        console.error('Unable to find target');
+                    }
+                    this.updateDropdown();
+                }
+            },
+            anyMatch: true,
+            caseSensitive: false
+        });
+
+        this.callParent(arguments);
+    },
+
+    updateDropdown: function (procedure_type) {
+        var boundRecord = EHR.DataEntryUtils.getBoundRecord(this);
+        if (!boundRecord){
+            console.warn('no bound record found');
+        }
+
+        if (boundRecord && boundRecord.store){
+            LDK.Assert.assertNotEmpty('SurgeryProcedureRoomField is being used on a store that lacks an Id field: ' + boundRecord.store.storeId, boundRecord.fields.get('Id'));
+        }
+
+        if (!procedure_type && boundRecord)
+            procedure_type = boundRecord.get('procedureType');
+
+        this.emptyText = 'Select room...';
+
+
+        var sql = this.makeSql(procedure_type);
+        this.store.sql = sql;
+        this.store.removeAll();
+        this.store.load();
+    },
+
+    makeSql(room_type) {
+        var sql = 'select room,displayname from wnprc.surgery_procedure_rooms';
+        console.log('room_type: ' + room_type);
+        if (room_type && room_type.length > 0) {
+            if (room_type === 'surgery') {
+                sql += ' where type = \'' + room_type.toLowerCase() + '\'';
+            }
+        }
+        return sql;
+    }
+});
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/ext4/data/SingleAnimal/SurgeryProcedureClientStore.js b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/data/SingleAnimal/SurgeryProcedureClientStore.js
new file mode 100644
index 00000000..4362783d
--- /dev/null
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/ext4/data/SingleAnimal/SurgeryProcedureClientStore.js
@@ -0,0 +1,24 @@
+/**
+ * This describes a Data Entry client store that looks for slave client stores, checks what they want to subscribe to,
+ * and updates those values.
+ */
+
+Ext4.define('WNPRC.ext.data.SingleAnimal.SurgeryProcedureClientStore', {
+    extend: 'WNPRC.ext.data.SingleAnimal.MasterSectionClientStore',
+
+    getExtraContext: function() {
+        var self = this;
+        var extraContent = this.callParent(arguments) || {};
+
+        if (this.getRange().length == 1) {
+            var rec = this.getAt(0);
+
+            // If this is a request, allow dates in the distant future.
+            if ( WNPRC.ExtUtils.getQCStateLabel(rec.get("QCState")).match(/request/i) ) {
+                extraContent.allowRequestsInDistantFuture = true;
+            }
+        }
+
+        return extraContent;
+    }
+});
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/model/sources/SurgeryProcedureMultipleRequest.js b/WNPRC_EHR/resources/web/wnprc_ehr/model/sources/SurgeryProcedureMultipleRequest.js
new file mode 100644
index 00000000..555d625d
--- /dev/null
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/model/sources/SurgeryProcedureMultipleRequest.js
@@ -0,0 +1,102 @@
+EHR.model.DataModelManager.registerMetadata('SurgeryProcedureMultipleRequest', {
+    byQuery: {
+        'ehr.requests': {
+            sendemail: {
+                editorConfig: {
+                    checked: true
+                }
+            },
+        },
+        'study.surgery_procedure': {
+            QCState: {
+                hidden: true
+            },
+            Id: {
+                editorConfig: {
+                    plugins: ['wnprc-animalfield']
+                }
+            },
+            proceduretype: {
+                editorConfig: {
+                    plugins: ['wnprc-procedurefield']
+                }
+            },
+            procedurename: {
+                xtype: 'wnprc-surgeryprocedurenamefield'
+            },
+            location: {
+                xtype: 'wnprc-surgeryprocedureroomfield'
+            },
+            date: {
+                editorConfig: {
+                    dateConfig: {
+                        minValue: Ext4.Date.add(new Date(), Ext4.Date.DAY, 1)
+                    }
+                },
+                setInitialValue: function(v){
+                    var date = (new Date()).add(Date.DAY, 2);
+                    date.setHours(9);
+                    date.setMinutes(30);
+                    return v || date;
+                }
+            },
+            enddate: {
+                editorConfig: {
+                    dateConfig: {
+                        minValue: Ext4.Date.add(new Date(), Ext4.Date.DAY, 1)
+                    }
+                },
+                setInitialValue: function(v){
+                    var date = (new Date()).add(Date.DAY, 2);
+                    date.setHours(9);
+                    date.setMinutes(30);
+                    return v || date;
+                }
+            },
+            project: {
+                xtype: 'wnprc-projectentryfield',
+            },
+            account: {
+                //nothing
+            },
+            consultRequest: {
+                //nothing
+            },
+            biopsyNeeded: {
+                //nothing
+            },
+            surgerytechneeded: {
+                //nothing
+            },
+            spineeded: {
+                //nothing
+            },
+            vetneeded: {
+                //nothing
+            },
+            vetneededreason: {
+                height: 100,
+                width: 400
+            },
+            equipment: {
+                height: 100,
+                width: 400
+            },
+            drugslab: {
+                height: 100,
+                width: 400
+            },
+            drugssurgery: {
+                height: 100,
+                width: 400
+            },
+            comments: {
+                height: 100,
+                width: 400
+            },
+            statuschangereason: {
+                hidden: true
+            }
+        }
+    }
+});
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/model/sources/SurgeryProcedureRequest.js b/WNPRC_EHR/resources/web/wnprc_ehr/model/sources/SurgeryProcedureRequest.js
new file mode 100644
index 00000000..049a93ff
--- /dev/null
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/model/sources/SurgeryProcedureRequest.js
@@ -0,0 +1,109 @@
+EHR.model.DataModelManager.registerMetadata('SurgeryProcedureRequest', {
+    byQuery: {
+        'ehr.requests': {
+            sendemail: {
+                editorConfig: {
+                    checked: true
+                }
+            },
+        },
+        'study.surgery_procedure': {
+            QCState: {
+                hidden: true
+            },
+            Id: {
+                editorConfig: {
+                    plugins: ['wnprc-animalfield']
+                }
+            },
+            apptid: {
+                hidden: true
+            },
+            proceduretype: {
+                editorConfig: {
+                    plugins: ['wnprc-procedurefield']
+                }
+            },
+            procedurename: {
+                xtype: 'wnprc-surgeryprocedurenamefield'
+            },
+            location: {
+                xtype: 'wnprc-surgeryprocedureroomfield'
+            },
+            date: {
+                defaultValue: Ext4.Date.add(new Date()),//'2018-12-05 11:00 AM',
+                editorConfig: {
+                    dateConfig: {
+                        minValue: Ext4.Date.add(new Date(), Ext4.Date.DAY, 1)
+                    }
+                }//,
+                // setInitialValue: function(v){
+                //     var date = (new Date()).add(Date.DAY, 1);
+                //     date.setHours(8);
+                //     date.setMinutes(0);
+                //     return v || date;
+                // }
+            },
+            enddate: {
+                editorConfig: {
+                    dateConfig: {
+                        minValue: Ext4.Date.add(new Date(), Ext4.Date.DAY, 1)
+                    },
+                    timeConfig: {
+                        minValue: '10:00 AM'
+                    }
+                }//,
+                // setInitialValue: function(v){
+                //     var date = (new Date()).add(Date.DAY, 1);
+                //     date.setHours(10);
+                //     date.setMinutes(0);
+                //     return v || date;
+                // }
+            },
+            project: {
+                xtype: 'wnprc-projectentryfield',
+            },
+            account: {
+                //nothing
+            },
+            consultRequest: {
+                //nothing
+            },
+            biopsyNeeded: {
+                //nothing
+            },
+            surgerytechneeded: {
+                //nothing
+            },
+            spineeded: {
+                //nothing
+            },
+            vetneeded: {
+                //nothing
+            },
+            vetneededreason: {
+                height: 100,
+                width: 400
+            },
+            equipment: {
+                height: 100,
+                width: 400
+            },
+            drugslab: {
+                height: 100,
+                width: 400
+            },
+            drugssurgery: {
+                height: 100,
+                width: 400
+            },
+            comments: {
+                height: 100,
+                width: 400
+            },
+            statuschangereason: {
+                hidden: true
+            }
+        }
+    }
+});
\ No newline at end of file
diff --git a/WNPRC_EHR/resources/web/wnprc_ehr/wnprc_ext4.lib.xml b/WNPRC_EHR/resources/web/wnprc_ehr/wnprc_ext4.lib.xml
index af4c58de..a8e2f8b6 100644
--- a/WNPRC_EHR/resources/web/wnprc_ehr/wnprc_ext4.lib.xml
+++ b/WNPRC_EHR/resources/web/wnprc_ehr/wnprc_ext4.lib.xml
@@ -2,6 +2,9 @@
     <library>
         <script path="/wnprc_ehr/ext4/components/MultiSelectField.js"/>
         <script path="/wnprc_ehr/ext4/components/Participant.js"/>
+        <script path="/wnprc_ehr/ext4/components/Procedure.js"/>
+        <script path="/wnprc_ehr/ext4/components/fields/SurgeryProcedureRoomField.js"/>
+        <script path="/wnprc_ehr/ext4/components/fields/SurgeryProcedureNameField.js"/>
         <script path="/wnprc_ehr/ext4/components/PregnancyDueDateCalculation.js"/>
         <script path="/wnprc_ehr/ext4/components/GestationCalculation.js"/>
         <script path="/wnprc_ehr/ext4/components/ProjectField.js"/>
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRController.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRController.java
index 156aeed3..c9d869f1 100644
--- a/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRController.java
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRController.java
@@ -1,1247 +1,1607 @@
-/*
- * Copyright (c) 2012-2013 LabKey Corporation
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package org.labkey.wnprc_ehr;
-
-import au.com.bytecode.opencsv.CSVWriter;
-import com.google.common.base.MoreObjects;
-import org.apache.commons.lang3.StringUtils;
-import org.joda.time.DateTime;
-import org.joda.time.LocalDate;
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.labkey.api.action.ApiAction;
-import org.labkey.api.action.ApiResponse;
-import org.labkey.api.action.ApiSimpleResponse;
-import org.labkey.api.action.ApiUsageException;
-import org.labkey.api.action.ExportAction;
-import org.labkey.api.action.RedirectAction;
-import org.labkey.api.action.SpringActionController;
-import org.labkey.api.data.Container;
-import org.labkey.api.data.Results;
-import org.labkey.api.data.RuntimeSQLException;
-import org.labkey.api.data.SimpleFilter;
-import org.labkey.api.ehr.EHRDemographicsService;
-import org.labkey.api.ehr.demographics.AnimalRecord;
-import org.labkey.api.module.Module;
-import org.labkey.api.module.ModuleLoader;
-import org.labkey.api.query.FieldKey;
-import org.labkey.api.query.QueryHelper;
-import org.labkey.api.resource.FileResource;
-import org.labkey.api.resource.MergedDirectoryResource;
-import org.labkey.api.resource.Resource;
-import org.labkey.api.security.ActionNames;
-import org.labkey.api.security.CSRF;
-import org.labkey.api.security.RequiresLogin;
-import org.labkey.api.security.RequiresNoPermission;
-import org.labkey.api.security.RequiresPermission;
-import org.labkey.api.security.RequiresSiteAdmin;
-import org.labkey.api.security.User;
-import org.labkey.api.security.permissions.ReadPermission;
-import org.labkey.api.util.ExceptionUtil;
-import org.labkey.api.util.ResultSetUtil;
-import org.labkey.api.util.URLHelper;
-import org.labkey.api.view.ActionURL;
-import org.labkey.api.view.NotFoundException;
-import org.labkey.googledrive.api.DriveSharePermission;
-import org.labkey.googledrive.api.DriveWrapper;
-import org.labkey.googledrive.api.FolderWrapper;
-import org.labkey.googledrive.api.GoogleDriveService;
-import org.labkey.webutils.api.action.SimpleJspPageAction;
-import org.labkey.webutils.api.action.SimpleJspReportAction;
-import org.labkey.webutils.api.json.EnhancedJsonResponse;
-import org.labkey.wnprc_ehr.bc.BCReportManager;
-import org.labkey.wnprc_ehr.bc.BCReportRunner;
-import org.labkey.wnprc_ehr.bc.BusinessContinuityReport;
-import org.labkey.wnprc_ehr.data.ColonyCensus.AssignmentPerDiems;
-import org.labkey.wnprc_ehr.data.ColonyCensus.ColonyCensus;
-import org.labkey.wnprc_ehr.data.ColonyCensus.PopulationChangeEvent;
-import org.labkey.wnprc_ehr.data.ColonyCensus.PopulationInstant;
-import org.labkey.wnprc_ehr.data.ColonyCensus.PopulationsOverTime;
-import org.labkey.wnprc_ehr.dataentry.validators.AnimalVerifier;
-import org.labkey.wnprc_ehr.dataentry.validators.ProjectVerifier;
-import org.labkey.wnprc_ehr.dataentry.validators.exception.InvalidAnimalIdException;
-import org.labkey.wnprc_ehr.dataentry.validators.exception.InvalidProjectException;
-import org.labkey.wnprc_ehr.email.EmailServer;
-import org.labkey.wnprc_ehr.email.EmailServerConfig;
-import org.labkey.wnprc_ehr.email.MessageIdentifier;
-import org.labkey.wnprc_ehr.service.dataentry.BehaviorDataEntryService;
-import org.springframework.validation.BindException;
-
-import javax.servlet.ServletOutputStream;
-import javax.servlet.http.HttpServletResponse;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.InputStreamReader;
-import java.sql.SQLException;
-import java.text.DateFormat;
-import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Date;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Locale;
-import java.util.Map;
-
-/**
- * User: bbimber
- * Date: 5/16/12
- * Time: 1:56 PM
- */
-public class WNPRC_EHRController extends SpringActionController
-{
-    private static final DefaultActionResolver _actionResolver = new DefaultActionResolver(WNPRC_EHRController.class);
-
-    public WNPRC_EHRController()
-    {
-        setActionResolver(_actionResolver);
-    }
-
-    WNPRC_EHRModule getModule()
-    {
-        Module module = ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
-        WNPRC_EHRModule wnprc_ehrModule = (WNPRC_EHRModule) module;
-        return wnprc_ehrModule;
-    }
-
-    MergedDirectoryResource getModuleDataDir(String subdirectory)
-    {
-        Resource r = getModule().getModuleResource("data/" + subdirectory);
-        MergedDirectoryResource dir = ((MergedDirectoryResource) r);
-
-        if ((dir == null) || dir.isFile() || !dir.exists())
-        {
-            return null;
-        }
-        else
-        {
-            return dir;
-        }
-    }
-
-    EnhancedJsonResponse getEnhancedJsonResponse()
-    {
-        return new EnhancedJsonResponse();
-    }
-
-    public static class PopulationEventsOverPeriodForm
-    {
-        private Date _startdate;
-        private Date _enddate;
-        private String _species;
-
-        public Date getStartdate()
-        {
-            return _startdate;
-        }
-
-        public void setStartdate(Date date)
-        {
-            _startdate = date;
-        }
-
-        public Date getEnddate()
-        {
-            return _enddate;
-        }
-
-        public void setEnddate(Date enddate)
-        {
-            _enddate = enddate;
-        }
-
-        public String getSpecies()
-        {
-            return _species;
-        }
-
-        public void setSpecies(String species)
-        {
-            _species = species;
-        }
-
-        public PopulationChangeEvent.Species getSpeciesEnum()
-        {
-            return PopulationChangeEvent.Species.getFromString(getSpecies());
-        }
-    }
-
-    public static class GetAnimalDemographicsForRoomForm
-    {
-        private String _room;
-
-        public String getRoom()
-        {
-            return _room;
-        }
-
-        public void setRoom(String room)
-        {
-            _room = room;
-        }
-    }
-
-    public static class BillablePerDiemsForm
-    {
-        private String startDate;
-        private String endDate;
-
-        public LocalDate getStartDate()
-        {
-            if (startDate == null)
-            {
-                LocalDate lastMonthToday = (new LocalDate()).minusMonths(1);
-                return lastMonthToday.withDayOfMonth(1);
-            }
-            else
-            {
-                return new LocalDate(startDate);
-            }
-        }
-
-        public void setStartDate(String startDate)
-        {
-            this.startDate = startDate;
-        }
-
-        public LocalDate getEndDate()
-        {
-            if (endDate == null)
-            {
-                LocalDate lastMonthToday = (new LocalDate()).minusMonths(1);
-                return lastMonthToday.dayOfMonth().withMaximumValue();
-            }
-            else
-            {
-                return new LocalDate(endDate);
-            }
-        }
-
-        public void setEndDate(String endDate)
-        {
-            this.endDate = endDate;
-        }
-    }
-
-    public static class EmailForm
-    {
-        private String _name;
-
-        public String getName()
-        {
-            return _name;
-        }
-
-        public void setName(String name)
-        {
-            _name = name;
-        }
-    }
-
-    public static class EmailServerForm
-    {
-        private String id;
-        private String _username;
-        private String _password;
-
-        public String getId()
-        {
-            return id;
-        }
-
-        public void setId(String id)
-        {
-            this.id = id;
-        }
-
-        public String getUsername()
-        {
-            return _username;
-        }
-
-        public void setUsername(String username)
-        {
-            _username = username;
-        }
-
-        public String getPassword()
-        {
-            return _password;
-        }
-
-        public void setPassword(String password)
-        {
-            _password = password;
-        }
-
-        public EmailServer getEmailServer(User user, Container container) throws Exception
-        {
-            if ((id != null) && (_password != null) && (_username != null))
-            {
-                EmailServerConfig config = EmailServerConfig.load(user, container, getId());
-                return new EmailServer(config, getUsername(), getPassword());
-            }
-            else
-            {
-                throw new ApiUsageException("You must supply a server, username and password.");
-            }
-        }
-    }
-
-    public static class VirologyResultsForm extends EmailServerForm
-    {
-        private String _subject;
-        private String _date;
-        private String _fromList;
-
-        public String getSubject()
-        {
-            if (_subject == null)
-            {
-                throw new ApiUsageException("You must supply a subject line in the 'subject' parameter.");
-            }
-            return _subject;
-        }
-
-        public void setSubject(String subject)
-        {
-            _subject = subject;
-        }
-
-        public String getDate()
-        {
-            return _date;
-        }
-
-        public void setDate(String date)
-        {
-            _date = date;
-        }
-
-        public String getFromList()
-        {
-            return _fromList;
-        }
-
-        public void setFromList(String fromList)
-        {
-            _fromList = fromList;
-        }
-
-        public Date getSentDate()
-        {
-            DateFormat df = new SimpleDateFormat("yyyy/MM/dd kk:mm:ss", Locale.ENGLISH);
-            Date result;
-            try
-            {
-                result = df.parse(_date);
-            }
-            catch (ParseException e)
-            {
-                throw new ApiUsageException("You must supply a valid sent timestamp in the form YYYY/MM/DD HH:mm:ss as the 'date' parameter.");
-            }
-            return result;
-        }
-
-        public String[] getFromListAsArray()
-        {
-            if (_fromList != null)
-            {
-                return StringUtils.split(_fromList, ",");
-            }
-            else
-            {
-                return new String[0];
-            }
-        }
-
-        public MessageIdentifier getMessageIdentifier()
-        {
-            return new MessageIdentifier(getSubject(), getFromListAsArray(), getSentDate());
-        }
-    }
-
-    public static class AssignmentBaseForm
-    {
-        private String _animalId;
-        private String _project;
-
-        public String getAnimalId()
-        {
-            return _animalId;
-        }
-
-        public void setAnimalId(String animalId)
-        {
-            _animalId = animalId;
-        }
-
-        public String getProject()
-        {
-            return _project;
-        }
-
-        public void setProject(String project)
-        {
-            _project = project;
-        }
-    }
-
-    public static class AddBehaviorAssignmentForm extends AssignmentBaseForm
-    {
-        private Date _assignDate;
-        private Date _estimatedReleaseDate;
-        private String _remark;
-
-        public Date getAssignDate()
-        {
-            return _assignDate;
-        }
-
-        public void setAssignDate(Date assignDate)
-        {
-            _assignDate = assignDate;
-        }
-
-        public Date getEstimatedReleaseDate()
-        {
-            return _estimatedReleaseDate;
-        }
-
-        public void setEstimatedReleaseDate(Date estimatedReleaseDate)
-        {
-            _estimatedReleaseDate = estimatedReleaseDate;
-        }
-
-        public String getRemark()
-        {
-            return _remark;
-        }
-
-        public void setRemark(String remark)
-        {
-            _remark = remark;
-        }
-    }
-
-    public static class ReleaseAnimalFromBehaviorAssignmentForm extends AssignmentBaseForm
-    {
-        private Date _releaseDate;
-
-        public Date getReleaseDate()
-        {
-            return _releaseDate;
-        }
-
-        public void setReleaseDate(Date releaseDate)
-        {
-            _releaseDate = releaseDate;
-        }
-    }
-
-    @RequiresLogin
-    public static class ReleaseAnimalFromBehaviorAssignmentAction extends ApiAction<ReleaseAnimalFromBehaviorAssignmentForm>
-    {
-
-        @Override
-        public Object execute(ReleaseAnimalFromBehaviorAssignmentForm form, BindException errors) throws Exception
-        {
-            BehaviorDataEntryService.get(getUser(), getContainer()).releaseAnimalFromBehaviorProject(
-                    form.getAnimalId(),
-                    form.getProject(),
-                    form.getReleaseDate()
-            );
-
-            return null;
-        }
-    }
-
-    public static class ValidateAnimalIdForm
-    {
-        public boolean isAliveAndAtCenter = false;
-        private String animalid;
-
-        public String getAnimalid()
-        {
-            return animalid;
-        }
-
-        public void setAnimalid(String animalid)
-        {
-            this.animalid = animalid;
-        }
-
-        public void setIsAliveAndAtCenter(boolean checkAlive)
-        {
-            this.isAliveAndAtCenter = checkAlive;
-        }
-    }
-
-    @RequiresLogin
-    public static class ValidateAnimalIdAction extends ApiAction<ValidateAnimalIdForm>
-    {
-        @Override
-        public Object execute(ValidateAnimalIdForm form, BindException errors)
-        {
-            JSONObject returnJSON = new JSONObject();
-            boolean isValid = true;
-            String reason = "";
-
-            try
-            {
-                AnimalVerifier av = new AnimalVerifier(form.getAnimalid(), getUser(), getContainer());
-                av.exists();
-
-                if (form.isAliveAndAtCenter)
-                {
-                    av.isAliveAndAtCenter();
-                }
-            }
-            catch (InvalidAnimalIdException e)
-            {
-                isValid = false;
-                reason = e.getMessage();
-            }
-
-            returnJSON.put("isValid", isValid);
-            returnJSON.put("reason", reason);
-
-            return returnJSON;
-        }
-    }
-
-    public static class CheckAnimalAssignment
-    {
-        private String animalid;
-        private String projectid;
-        private Date date;
-
-        public String getAnimalid()
-        {
-            return animalid;
-        }
-
-        public void setAnimalid(String animalid)
-        {
-            this.animalid = animalid;
-        }
-
-        public String getProjectid()
-        {
-            return projectid;
-        }
-
-        public void setProjectid(String projectid)
-        {
-            this.projectid = projectid;
-        }
-
-        public Date getDate()
-        {
-            return date;
-        }
-
-        public void setDate(Date date)
-        {
-            this.date = date;
-        }
-    }
-
-    @RequiresLogin
-    @ActionNames("checkIfAnimalIsAssigned")
-    public static class CheckIfAnimalIsAssigned extends ApiAction<CheckAnimalAssignment>
-    {
-        @Override
-        public Object execute(CheckAnimalAssignment form, BindException errors)
-        {
-            JSONObject returnJSON = new JSONObject();
-            boolean assigned = false;
-
-            if (form.getDate() == null || form.getAnimalid() == null || form.getProjectid() == null)
-            {
-                throw new IllegalArgumentException("Date, animalid, and projectid are all required.");
-            }
-
-            try
-            {
-                ProjectVerifier pv = new ProjectVerifier(form.getProjectid(), getUser(), getContainer());
-
-                // Throws an error if the animal is assigned
-                pv.animalIsNotAssignedOn(form.getAnimalid(), form.getDate());
-
-            }
-            catch (InvalidProjectException e)
-            {
-                assigned = true;
-            }
-
-            returnJSON.put("assigned", assigned);
-
-            return returnJSON;
-        }
-    }
-
-    public static class UserForm
-    {
-        public String username;
-
-        public String getUsername()
-        {
-            return username;
-        }
-
-        public void setUsername(String username)
-        {
-            this.username = username;
-        }
-    }
-
-    @RequiresPermission(ReadPermission.class)
-    @ActionNames("getChanges")
-    @CSRF
-    public class GetChangeLists extends ApiAction<Void>
-    {
-        public ApiResponse execute(Void form, BindException errors) throws Exception
-        {
-            Map<String, Object> props = new HashMap<>();
-
-            // Grab the changelists directory
-            MergedDirectoryResource changelistDir = getModuleDataDir("changelists");
-
-            for (Resource resource : changelistDir.list())
-            {
-                if (resource.isFile())
-                { // Don't traverse subdirectories.
-                    File changelistFile = ((FileResource) resource).getFile();
-                    String filename = changelistFile.getAbsolutePath();
-                    String text = "";
-                    String errorText = "";
-
-                    if (changelistFile.canRead())
-                    {
-                        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(changelistFile.getAbsolutePath()), "UTF-8"));
-
-                        String line = null;
-                        while ((line = reader.readLine()) != null)
-                        {
-                            text += '\n' + line;
-                        }
-                        reader.close();
-                    }
-
-                    HashMap<String, String> fileInfo = new HashMap<>();
-                    fileInfo.put("text", text);
-                    fileInfo.put("errorText", errorText);
-                    props.put(filename, fileInfo);
-                }
-            }
-
-            return new ApiSimpleResponse(props);
-        }
-    }
-
-    @RequiresPermission(ReadPermission.class)
-    @RequiresLogin
-    @ActionNames("getColonyPopulationPerMonth")
-    public class GetPopulationPerMonth extends ApiAction<Void>
-    {
-        public ApiResponse execute(Void form, BindException errors)
-        {
-            ColonyCensus colonyCensus = new ColonyCensus(getContainer(), getUser());
-            Map<String, Map<LocalDate, PopulationInstant>> populations = colonyCensus.getPopulationsPerMonthForAllSpecies();
-
-            Map<String, Object> props = new HashMap<>();
-            props.put("populations", populations);
-
-            return new ApiSimpleResponse(props);
-        }
-    }
-
-    @RequiresLogin
-    @ActionNames("getPopulationChangeEventsOverPeriod")
-    public class GetPopulationEventsOverPeriod extends ApiAction<PopulationEventsOverPeriodForm>
-    {
-        public ApiResponse execute(PopulationEventsOverPeriodForm form, BindException errors)
-        {
-            DateTime start = new DateTime(form.getStartdate());
-            DateTime end = new DateTime(form.getEnddate());
-
-            ColonyCensus colonyCensus = new ColonyCensus(getContainer(), getUser());
-            PopulationsOverTime pops = new PopulationsOverTime(start, end, colonyCensus, form.getSpeciesEnum());
-
-            EnhancedJsonResponse json = getEnhancedJsonResponse();
-            json.put("pops", pops);
-
-            return json;
-        }
-    }
-
-    @RequiresPermission(ReadPermission.class)
-    @CSRF
-    public class GetAnimalDemographicsForRoomAction extends ApiAction<GetAnimalDemographicsForRoomForm>
-    {
-        public ApiResponse execute(GetAnimalDemographicsForRoomForm form, BindException errors)
-        {
-            Map<String, Object> props = new HashMap<>();
-
-            if (form.getRoom() == null)
-            {
-                errors.reject(ERROR_MSG, "No Room Specified");
-                return null;
-            }
-
-            Results rs = null;
-            List<String> animalIds = new ArrayList<String>();
-
-            try
-            {
-                // Set up our query
-                SimpleFilter filter = new SimpleFilter(FieldKey.fromString("room"), form.getRoom());
-                QueryHelper animalListQuery = new QueryHelper(getContainer(), getUser(), "study", "demographicsCurLocation");
-
-                // Define columns to get
-                List<FieldKey> columns = new ArrayList<FieldKey>();
-                columns.add(FieldKey.fromString("room"));
-                columns.add(FieldKey.fromString("Id"));
-
-                // Execute the query
-                rs = animalListQuery.select(columns, filter);
-
-                // Now, execute it to get our list of Ids
-                if (rs.next())
-                {
-                    do
-                    {
-                        animalIds.add(rs.getString(FieldKey.fromString("Id")));
-                    }
-                    while (rs.next());
-                }
-
-                try
-                {
-                    JSONObject json = new JSONObject();
-                    for (AnimalRecord r : EHRDemographicsService.get().getAnimals(getContainer(), animalIds))
-                    {
-                        json.put(r.getId(), r.getProps());
-                    }
-
-                    props.put("results", json);
-                }
-                catch (Exception e)
-                {
-                    ExceptionUtil.logExceptionToMothership(getViewContext().getRequest(), e);
-                }
-            }
-            catch (SQLException e)
-            {
-                throw new RuntimeSQLException(e);
-            }
-            finally
-            {
-                ResultSetUtil.close(rs);
-            }
-
-            return new ApiSimpleResponse(props);
-        }
-    }
-
-    @RequiresLogin()
-    @ActionNames("billablePerDiems")
-    public class BillablePerDiemsAction extends ApiAction<BillablePerDiemsForm>
-    {
-        @Override
-        public Object execute(BillablePerDiemsForm form, BindException errors)
-        {
-            AssignmentPerDiems assignmentPerDiems = new AssignmentPerDiems(getContainer(), getUser(), form.getStartDate(), form.getEndDate());
-
-            return new EnhancedJsonResponse(assignmentPerDiems.getBillableDaysJSON());
-        }
-    }
-
-    @RequiresLogin()
-    @ActionNames("billablePerDiemsAsCSV")
-    public class BillablePerDiemsAsCSV extends ExportAction<BillablePerDiemsForm>
-    {
-        @Override
-        public void export(BillablePerDiemsForm form, HttpServletResponse response, BindException errors) throws Exception
-        {
-            AssignmentPerDiems assignmentPerDiems = new AssignmentPerDiems(getContainer(), getUser(), form.getStartDate(), form.getEndDate());
-            List<AssignmentPerDiems.BillableDay> billableDays = AssignmentPerDiems.consolidateBillableDays(assignmentPerDiems.getBillableDays());
-
-            // Prevent caching of the file.
-            response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
-            response.setHeader("Pragma", "no-cache"); // HTTP 1.0.
-            response.setHeader("Expires", "0"); // Proxies.
-
-            if (billableDays.size() == 0)
-            {
-                response.setContentType("text/plain");
-                setFilename(response, "billablePerDiems.txt");
-
-                ServletOutputStream out = response.getOutputStream();
-
-                out.println("There are no billable per-diem assignments for the time range of " + form.getStartDate().toString() + " to " + form.getEndDate().toString() + ".");
-
-
-                // Close up the pipeline
-                out.flush();
-                out.close();
-            }
-            else
-            {
-                response.setContentType("text/csv");
-                String filename = "billablePerDiems_" + form.getStartDate().toString() + "_" + form.getEndDate().toString() + ".csv";
-                setFilename(response, filename);
-
-                Boolean headerHasBeenPrinted = false;
-                CSVWriter csvOut = new CSVWriter(response.getWriter());
-
-                for (AssignmentPerDiems.BillableDay billableDay : billableDays)
-                {
-                    if (!headerHasBeenPrinted)
-                    {
-                        csvOut.writeNext(billableDay.csvHeaderLine);
-                        headerHasBeenPrinted = true;
-                    }
-
-                    csvOut.writeNext(billableDay.toCsvLine());
-                }
-
-                csvOut.flush();
-                csvOut.close();
-            }
-        }
-
-        private void setFilename(HttpServletResponse response, String filename)
-        {
-            // Set the filename in the header.
-            String headerKey = "Content-Disposition";
-            String headerValue = String.format("attachment; filename=\"%s\"", filename);
-            response.setHeader(headerKey, headerValue);
-        }
-    }
-
-    public class EmailModel
-    {
-        public HashMap<String, Map<String, String>> data = new HashMap<>();
-
-        public String getName()
-        {
-            return "Jon";
-        }
-
-        public java.lang.Void add(String area, String room, String ob)
-        {
-            Map areaMap = data.get(area);
-            if (areaMap == null)
-            {
-                areaMap = new HashMap<>();
-                data.put(area, areaMap);
-            }
-
-            areaMap.put(room, ob);
-            return null;
-        }
-
-        public java.lang.Void populateData()
-        {
-            this.add("a", "a142", "r12900");
-            this.add("a", "a142", "r12905");
-            this.add("a", "a144", "r12904");
-            this.add("b", "b12", "r12903");
-            return null;
-        }
-    }
-
-    @RequiresNoPermission()
-    public class ExampleEmailAction extends ApiAction<EmailForm>
-    {
-        @Override
-        public ApiResponse execute(EmailForm form, BindException errors) throws Exception
-        {
-            EmailModel model = new EmailModel();
-            model.populateData();
-            String name = form.getName();
-            if (name == null)
-            {
-                throw new Exception("You must supply a JSP template name.");
-            }
-            WNPRC_EHREmail<EmailModel> email = new WNPRC_EHREmail<>(form.getName());
-            String emailContents = email.renderEmail(model);
-
-            HashMap<String, String> props = new HashMap<>();
-            props.put("text", emailContents);
-
-            return new ApiSimpleResponse(props);
-        }
-    }
-
-    @ActionNames("listEmails")
-    @RequiresNoPermission()
-    public class ListEmailsAction extends ApiAction<EmailServerForm>
-    {
-        @Override
-        public ApiResponse execute(EmailServerForm form, BindException errors) throws Exception
-        {
-            return new ApiSimpleResponse(form.getEmailServer(getUser(), getContainer()).getInboxMessages());
-        }
-    }
-
-    @ActionNames("getVirologyResultsFromEmail")
-    @RequiresNoPermission()
-    public class GetVirologyResultsFromEmailAction extends ApiAction<VirologyResultsForm>
-    {
-        @Override
-        public ApiResponse execute(VirologyResultsForm form, BindException errors) throws Exception
-        {
-            JSONObject json = new JSONObject();
-
-            JSONArray rows = form.getEmailServer(getUser(), getContainer()).getExcelDataFromMessage(form.getMessageIdentifier());
-            json.put("rows", rows);
-
-            return new ApiSimpleResponse(json);
-        }
-    }
-
-    @ActionNames("deleteEmail")
-    @RequiresNoPermission()
-    public class deleteEmailAction extends ApiAction<VirologyResultsForm>
-    {
-        @Override
-        public ApiResponse execute(VirologyResultsForm form, BindException errors) throws Exception
-        {
-            JSONObject json = new JSONObject();
-
-            form.getEmailServer(getUser(), getContainer()).deleteMessage(form.getMessageIdentifier());
-
-            return new ApiSimpleResponse(json);
-        }
-    }
-
-    @ActionNames("previewEmailExcelAttachment")
-    @RequiresNoPermission()
-    public class previewEmailAction extends ApiAction<VirologyResultsForm>
-    {
-        @Override
-        public ApiResponse execute(VirologyResultsForm form, BindException errors) throws Exception
-        {
-            JSONObject json = new JSONObject();
-
-            JSONArray rows = form.getEmailServer(getUser(), getContainer()).getExcelPreviewData(form.getMessageIdentifier());
-            json.put("rows", rows);
-
-            JSONObject email = form.getEmailServer(getUser(), getContainer()).getInboxMessage(form.getMessageIdentifier());
-            json.put("emaildata", email);
-
-            WNPRC_EHREmail<JSONObject> tablePreview = new WNPRC_EHREmail<>("/org/labkey/wnprc_ehr/email/ExcelPreview.jsp");
-
-            json.put("html", tablePreview.renderEmail(json));
-            return new ApiSimpleResponse(json);
-        }
-    }
-
-    public abstract class WNPRCJspPageAction extends SimpleJspPageAction
-    {
-        @Override
-        public Module getModule()
-        {
-            return ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
-        }
-    }
-
-    public abstract class WNPRCReportPageAction extends SimpleJspReportAction
-    {
-        @Override
-        public Module getModule()
-        {
-            return ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
-        }
-    }
-
-    @ActionNames("NecropsySchedule")
-    @RequiresLogin()
-    public class NecropsyScheduleAction extends WNPRCJspPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/dataentry/NecropsySchedule.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Necropsy Schedule";
-        }
-    }
-
-    @ActionNames("PathologyCaseList")
-    @RequiresLogin()
-    public class PathologyCaseListAction extends WNPRCJspPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/dataentry/PathologyCaseList.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Pathology Case List";
-        }
-    }
-
-    @ActionNames("NecropsyReport")
-    @RequiresLogin()
-    public class NecropsyReportAction extends WNPRCReportPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/dataentry/NecropsyReport.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Necropsy Report";
-        }
-    }
-
-    @ActionNames("NecropsyCollectionList")
-    @RequiresLogin()
-    public class NecropsyCollectionListAction extends WNPRCReportPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/dataentry/NecropsyCollectionList.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Necropsy Collection List";
-        }
-    }
-
-    @ActionNames("ColonyCensus")
-    @RequiresLogin()
-    public class ColonyCensusAction extends WNPRCJspPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/population_management/ColonyCensus.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Colony Census";
-        }
-    }
-
-    @ActionNames("PerDiems")
-    @RequiresLogin()
-    public class PerDiemsAction extends WNPRCJspPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/population_management/PerDiems.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Per Diems";
-        }
-    }
-
-    @ActionNames("AssignBehaviorProjects")
-    @RequiresLogin()
-    public class AssignBehaviorProjectsAction extends WNPRCJspPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/dataentry/behavior/AssignBehaviorProjects.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Assign Behavior Projects";
-        }
-    }
-
-    @ActionNames("DiarrheaAnalysis")
-    @RequiresLogin()
-    public class DiarrheaAnalysisPage extends WNPRCJspPageAction
-    {
-        @Override
-        public String getPathToJsp()
-        {
-            return "pages/clinical/DiarrheaAnalysis.jsp";
-        }
-
-        @Override
-        public String getTitle()
-        {
-            return "Diarrhea Analysis";
-        }
-    }
-
-    @RequiresLogin
-    public class AddBehaviorAssignmentAction extends ApiAction<AddBehaviorAssignmentForm>
-    {
-
-        @Override
-        public Object execute(AddBehaviorAssignmentForm form, BindException errors) throws Exception
-        {
-            BehaviorDataEntryService.get(getUser(), getContainer()).addBehaviorAssignment(
-                    form.getAnimalId(),
-                    form.getProject(),
-                    form.getAssignDate(),
-                    form.getEstimatedReleaseDate(),
-                    form.getRemark()
-            );
-
-            return null;
-        }
-    }
-
-    @RequiresSiteAdmin
-    @ActionNames("UploadBCReports")
-    public class uploadBCReportAction extends ApiAction<Void>
-    {
-        @Override
-        public Object execute(Void form, BindException errors) throws NotFoundException
-        {
-            BCReportManager manager = new BCReportManager(getUser(), getContainer());
-            manager.uploadReports();
-
-            return new JSONObject();
-        }
-    }
-
-    @RequiresSiteAdmin
-    @ActionNames("MakeUserWriterForBCReports")
-    public class ShareBCReportsWithUserAction extends ApiAction<UserForm>
-    {
-        @Override
-        public Object execute(UserForm form, BindException errors) throws Exception
-        {
-            WNPRC_EHRModule wnprc = ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
-            String id = wnprc.getGoogleDriveAccountId(getContainer());
-
-            DriveWrapper drive = GoogleDriveService.get().getDrive(id, getUser());
-            FolderWrapper bcFolder = drive.getFolder(BusinessContinuityReport.BusinessContinuityFolderName);
-
-            bcFolder.shareWithUser(form.getUsername(), DriveSharePermission.WRITER);
-
-            return new JSONObject();
-        }
-    }
-
-    @RequiresSiteAdmin
-    @ActionNames("ScheduleBCReports")
-    public class ScheduleBCReportsAction extends ApiAction<Void>
-    {
-        @Override
-        public Object execute(Void form, BindException errors)
-        {
-            BCReportRunner.schedule();
-            return new JSONObject();
-        }
-    }
-
-    @RequiresSiteAdmin
-    @ActionNames("UnscheduleBCReports")
-    public class UnscheduleBCReportsAction extends ApiAction<Void>
-    {
-        @Override
-        public Object execute(Void form, BindException errors)
-        {
-            BCReportRunner.unschedule();
-            return new JSONObject();
-        }
-    }
-
-    /**
-     * Redirects the data entry for a task to either /ehr/&lt;container&gt;/manageTask.view? or
-     * /ehr/&lt;container&gt;/dataEntryForm.view? depending on the form type.
-     */
-    @SuppressWarnings("unused")
-    @RequiresLogin
-    @ActionNames("manageWnprcTask")
-    public class ManageWnprcTaskAction extends RedirectAction<java.lang.Void>
-    {
-        // these constants are here to hopefully prevent us from mistyping the capitalization
-        // later in the method. also, they should be different enough to avoid one-off typos
-        // - clay, 23 Jan 2018
-        private static final String CAMELCASE_FORMTYPE = "formType";
-        private static final String LOWERCASE_FORMTYPE = "formtype";
-
-        @Override
-        public URLHelper getSuccessURL(java.lang.Void aVoid)
-        {
-            ActionURL oldUrl = getViewContext().getActionURL();
-            ActionURL newUrl;
-            Map<String, String[]> params = oldUrl.getParameterMap();
-            // just to be safe, make sure we're reading the form type regardless of the capitalization
-            // (it _should_ be all lowercase, but we should check anyway)
-            String formType = MoreObjects.firstNonNull(
-                    oldUrl.getParameter(LOWERCASE_FORMTYPE),
-                    oldUrl.getParameter(CAMELCASE_FORMTYPE));
-            switch (formType)
-            {
-                // this is the list of things that need redirected to the dataEntryForm.view in the EHR
-                // module (the ExtJS 4 version, which is built from the other data entry Java classes)
-                case "Necropsy":
-                case "Breeding Encounter":
-                    newUrl = new ActionURL(String.format("/ehr%s/dataEntryForm.view",
-                            getContainer().getPath()));
-                    // the ExtJS 4 data entry form expects "formType" with a capital 'T'
-                    if (params.containsKey(LOWERCASE_FORMTYPE))
-                        params.put(CAMELCASE_FORMTYPE, params.remove(LOWERCASE_FORMTYPE));
-                    newUrl.addParameters(params);
-                    break;
-                // by default, all non-specified redirects will go to the manageTask.view in the EHR
-                // module, which builds the forms in ExtJS 3 from the form types/sections defined in
-                // the database (via the EHR module)
-                default:
-                    newUrl = new ActionURL(String.format("/ehr%s/manageTask.view",
-                            getContainer().getPath()));
-                    // the ExtJS 3 data entry form expects "formtype" all lower case
-                    if (params.containsKey(CAMELCASE_FORMTYPE))
-                        params.put(LOWERCASE_FORMTYPE, params.remove(CAMELCASE_FORMTYPE));
-                    newUrl.addParameters(params);
-                    break;
-            }
-            return newUrl;
-        }
-
-        @Override
-        public boolean doAction(java.lang.Void aVoid, BindException errors)
-        {
-            return true;
-        }
-    }
+/*
+ * Copyright (c) 2012-2013 LabKey Corporation
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.labkey.wnprc_ehr;
+
+import au.com.bytecode.opencsv.CSVWriter;
+import com.google.common.base.MoreObjects;
+import org.apache.commons.lang3.StringUtils;
+import org.joda.time.DateTime;
+import org.joda.time.LocalDate;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.labkey.api.action.ApiAction;
+import org.labkey.api.action.ApiResponse;
+import org.labkey.api.action.ApiSimpleResponse;
+import org.labkey.api.action.ApiUsageException;
+import org.labkey.api.action.ExportAction;
+import org.labkey.api.action.RedirectAction;
+import org.labkey.api.action.SpringActionController;
+import org.labkey.api.data.Container;
+import org.labkey.api.data.DbScope;
+import org.labkey.api.data.Results;
+import org.labkey.api.data.RuntimeSQLException;
+import org.labkey.api.data.SimpleFilter;
+import org.labkey.api.data.TableInfo;
+import org.labkey.api.ehr.EHRDemographicsService;
+import org.labkey.api.ehr.demographics.AnimalRecord;
+import org.labkey.api.module.Module;
+import org.labkey.api.module.ModuleLoader;
+import org.labkey.api.query.BatchValidationException;
+import org.labkey.api.query.FieldKey;
+import org.labkey.api.query.QueryHelper;
+import org.labkey.api.query.QueryService;
+import org.labkey.api.query.QueryUpdateService;
+import org.labkey.api.query.QueryUpdateServiceException;
+import org.labkey.api.resource.FileResource;
+import org.labkey.api.resource.MergedDirectoryResource;
+import org.labkey.api.resource.Resource;
+import org.labkey.api.security.ActionNames;
+import org.labkey.api.security.CSRF;
+import org.labkey.api.security.RequiresLogin;
+import org.labkey.api.security.RequiresNoPermission;
+import org.labkey.api.security.RequiresPermission;
+import org.labkey.api.security.RequiresSiteAdmin;
+import org.labkey.api.security.User;
+import org.labkey.api.security.permissions.ReadPermission;
+import org.labkey.api.util.ExceptionUtil;
+import org.labkey.api.util.ResultSetUtil;
+import org.labkey.api.util.URLHelper;
+import org.labkey.api.view.ActionURL;
+import org.labkey.api.view.NotFoundException;
+import org.labkey.dbutils.api.SimpleQueryUpdater;
+import org.labkey.googledrive.api.DriveSharePermission;
+import org.labkey.googledrive.api.DriveWrapper;
+import org.labkey.googledrive.api.FolderWrapper;
+import org.labkey.googledrive.api.GoogleDriveService;
+import org.labkey.webutils.api.action.SimpleJspPageAction;
+import org.labkey.webutils.api.action.SimpleJspReportAction;
+import org.labkey.webutils.api.json.EnhancedJsonResponse;
+import org.labkey.wnprc_ehr.bc.BCReportManager;
+import org.labkey.wnprc_ehr.bc.BCReportRunner;
+import org.labkey.wnprc_ehr.bc.BusinessContinuityReport;
+import org.labkey.wnprc_ehr.data.ColonyCensus.AssignmentPerDiems;
+import org.labkey.wnprc_ehr.data.ColonyCensus.ColonyCensus;
+import org.labkey.wnprc_ehr.data.ColonyCensus.PopulationChangeEvent;
+import org.labkey.wnprc_ehr.data.ColonyCensus.PopulationInstant;
+import org.labkey.wnprc_ehr.data.ColonyCensus.PopulationsOverTime;
+import org.labkey.wnprc_ehr.dataentry.validators.AnimalVerifier;
+import org.labkey.wnprc_ehr.dataentry.validators.ProjectVerifier;
+import org.labkey.wnprc_ehr.dataentry.validators.exception.InvalidAnimalIdException;
+import org.labkey.wnprc_ehr.dataentry.validators.exception.InvalidProjectException;
+import org.labkey.wnprc_ehr.email.EmailServer;
+import org.labkey.wnprc_ehr.email.EmailServerConfig;
+import org.labkey.wnprc_ehr.email.MessageIdentifier;
+import org.labkey.wnprc_ehr.schemas.WNPRC_Schema;
+import org.labkey.wnprc_ehr.service.dataentry.BehaviorDataEntryService;
+import org.springframework.validation.BindException;
+
+import javax.servlet.ServletOutputStream;
+import javax.servlet.http.HttpServletResponse;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStreamReader;
+import java.sql.SQLException;
+import java.text.DateFormat;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.UUID;
+
+/**
+ * User: bbimber
+ * Date: 5/16/12
+ * Time: 1:56 PM
+ */
+public class WNPRC_EHRController extends SpringActionController
+{
+    private static final DefaultActionResolver _actionResolver = new DefaultActionResolver(WNPRC_EHRController.class);
+
+    public WNPRC_EHRController()
+    {
+        setActionResolver(_actionResolver);
+    }
+
+    WNPRC_EHRModule getModule()
+    {
+        Module module = ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
+        WNPRC_EHRModule wnprc_ehrModule = (WNPRC_EHRModule) module;
+        return wnprc_ehrModule;
+    }
+
+    MergedDirectoryResource getModuleDataDir(String subdirectory)
+    {
+        Resource r = getModule().getModuleResource("data/" + subdirectory);
+        MergedDirectoryResource dir = ((MergedDirectoryResource) r);
+
+        if ((dir == null) || dir.isFile() || !dir.exists())
+        {
+            return null;
+        }
+        else
+        {
+            return dir;
+        }
+    }
+
+    EnhancedJsonResponse getEnhancedJsonResponse()
+    {
+        return new EnhancedJsonResponse();
+    }
+
+    public static class PopulationEventsOverPeriodForm
+    {
+        private Date _startdate;
+        private Date _enddate;
+        private String _species;
+
+        public Date getStartdate()
+        {
+            return _startdate;
+        }
+
+        public void setStartdate(Date date)
+        {
+            _startdate = date;
+        }
+
+        public Date getEnddate()
+        {
+            return _enddate;
+        }
+
+        public void setEnddate(Date enddate)
+        {
+            _enddate = enddate;
+        }
+
+        public String getSpecies()
+        {
+            return _species;
+        }
+
+        public void setSpecies(String species)
+        {
+            _species = species;
+        }
+
+        public PopulationChangeEvent.Species getSpeciesEnum()
+        {
+            return PopulationChangeEvent.Species.getFromString(getSpecies());
+        }
+    }
+
+    public static class GetAnimalDemographicsForRoomForm
+    {
+        private String _room;
+
+        public String getRoom()
+        {
+            return _room;
+        }
+
+        public void setRoom(String room)
+        {
+            _room = room;
+        }
+    }
+
+    public static class BillablePerDiemsForm
+    {
+        private String startDate;
+        private String endDate;
+
+        public LocalDate getStartDate()
+        {
+            if (startDate == null)
+            {
+                LocalDate lastMonthToday = (new LocalDate()).minusMonths(1);
+                return lastMonthToday.withDayOfMonth(1);
+            }
+            else
+            {
+                return new LocalDate(startDate);
+            }
+        }
+
+        public void setStartDate(String startDate)
+        {
+            this.startDate = startDate;
+        }
+
+        public LocalDate getEndDate()
+        {
+            if (endDate == null)
+            {
+                LocalDate lastMonthToday = (new LocalDate()).minusMonths(1);
+                return lastMonthToday.dayOfMonth().withMaximumValue();
+            }
+            else
+            {
+                return new LocalDate(endDate);
+            }
+        }
+
+        public void setEndDate(String endDate)
+        {
+            this.endDate = endDate;
+        }
+    }
+
+    public static class EmailForm
+    {
+        private String _name;
+
+        public String getName()
+        {
+            return _name;
+        }
+
+        public void setName(String name)
+        {
+            _name = name;
+        }
+    }
+
+    public static class EmailServerForm
+    {
+        private String id;
+        private String _username;
+        private String _password;
+
+        public String getId()
+        {
+            return id;
+        }
+
+        public void setId(String id)
+        {
+            this.id = id;
+        }
+
+        public String getUsername()
+        {
+            return _username;
+        }
+
+        public void setUsername(String username)
+        {
+            _username = username;
+        }
+
+        public String getPassword()
+        {
+            return _password;
+        }
+
+        public void setPassword(String password)
+        {
+            _password = password;
+        }
+
+        public EmailServer getEmailServer(User user, Container container) throws Exception
+        {
+            if ((id != null) && (_password != null) && (_username != null))
+            {
+                EmailServerConfig config = EmailServerConfig.load(user, container, getId());
+                return new EmailServer(config, getUsername(), getPassword());
+            }
+            else
+            {
+                throw new ApiUsageException("You must supply a server, username and password.");
+            }
+        }
+    }
+
+    public static class VirologyResultsForm extends EmailServerForm
+    {
+        private String _subject;
+        private String _date;
+        private String _fromList;
+
+        public String getSubject()
+        {
+            if (_subject == null)
+            {
+                throw new ApiUsageException("You must supply a subject line in the 'subject' parameter.");
+            }
+            return _subject;
+        }
+
+        public void setSubject(String subject)
+        {
+            _subject = subject;
+        }
+
+        public String getDate()
+        {
+            return _date;
+        }
+
+        public void setDate(String date)
+        {
+            _date = date;
+        }
+
+        public String getFromList()
+        {
+            return _fromList;
+        }
+
+        public void setFromList(String fromList)
+        {
+            _fromList = fromList;
+        }
+
+        public Date getSentDate()
+        {
+            DateFormat df = new SimpleDateFormat("yyyy/MM/dd kk:mm:ss", Locale.ENGLISH);
+            Date result;
+            try
+            {
+                result = df.parse(_date);
+            }
+            catch (ParseException e)
+            {
+                throw new ApiUsageException("You must supply a valid sent timestamp in the form YYYY/MM/DD HH:mm:ss as the 'date' parameter.");
+            }
+            return result;
+        }
+
+        public String[] getFromListAsArray()
+        {
+            if (_fromList != null)
+            {
+                return StringUtils.split(_fromList, ",");
+            }
+            else
+            {
+                return new String[0];
+            }
+        }
+
+        public MessageIdentifier getMessageIdentifier()
+        {
+            return new MessageIdentifier(getSubject(), getFromListAsArray(), getSentDate());
+        }
+    }
+
+    public static class AssignmentBaseForm
+    {
+        private String _animalId;
+        private String _project;
+
+        public String getAnimalId()
+        {
+            return _animalId;
+        }
+
+        public void setAnimalId(String animalId)
+        {
+            _animalId = animalId;
+        }
+
+        public String getProject()
+        {
+            return _project;
+        }
+
+        public void setProject(String project)
+        {
+            _project = project;
+        }
+    }
+
+    public static class AddBehaviorAssignmentForm extends AssignmentBaseForm
+    {
+        private Date _assignDate;
+        private Date _estimatedReleaseDate;
+        private String _remark;
+
+        public Date getAssignDate()
+        {
+            return _assignDate;
+        }
+
+        public void setAssignDate(Date assignDate)
+        {
+            _assignDate = assignDate;
+        }
+
+        public Date getEstimatedReleaseDate()
+        {
+            return _estimatedReleaseDate;
+        }
+
+        public void setEstimatedReleaseDate(Date estimatedReleaseDate)
+        {
+            _estimatedReleaseDate = estimatedReleaseDate;
+        }
+
+        public String getRemark()
+        {
+            return _remark;
+        }
+
+        public void setRemark(String remark)
+        {
+            _remark = remark;
+        }
+    }
+
+    public static class ReleaseAnimalFromBehaviorAssignmentForm extends AssignmentBaseForm
+    {
+        private Date _releaseDate;
+
+        public Date getReleaseDate()
+        {
+            return _releaseDate;
+        }
+
+        public void setReleaseDate(Date releaseDate)
+        {
+            _releaseDate = releaseDate;
+        }
+    }
+
+    @RequiresLogin
+    public static class ReleaseAnimalFromBehaviorAssignmentAction extends ApiAction<ReleaseAnimalFromBehaviorAssignmentForm>
+    {
+
+        @Override
+        public Object execute(ReleaseAnimalFromBehaviorAssignmentForm form, BindException errors) throws Exception
+        {
+            BehaviorDataEntryService.get(getUser(), getContainer()).releaseAnimalFromBehaviorProject(
+                    form.getAnimalId(),
+                    form.getProject(),
+                    form.getReleaseDate()
+            );
+
+            return null;
+        }
+    }
+
+    public static class ValidateAnimalIdForm
+    {
+        public boolean isAliveAndAtCenter = false;
+        private String animalid;
+
+        public String getAnimalid()
+        {
+            return animalid;
+        }
+
+        public void setAnimalid(String animalid)
+        {
+            this.animalid = animalid;
+        }
+
+        public void setIsAliveAndAtCenter(boolean checkAlive)
+        {
+            this.isAliveAndAtCenter = checkAlive;
+        }
+    }
+
+    @RequiresLogin
+    public static class ValidateAnimalIdAction extends ApiAction<ValidateAnimalIdForm>
+    {
+        @Override
+        public Object execute(ValidateAnimalIdForm form, BindException errors)
+        {
+            JSONObject returnJSON = new JSONObject();
+            boolean isValid = true;
+            String reason = "";
+
+            try
+            {
+                AnimalVerifier av = new AnimalVerifier(form.getAnimalid(), getUser(), getContainer());
+                av.exists();
+
+                if (form.isAliveAndAtCenter)
+                {
+                    av.isAliveAndAtCenter();
+                }
+            }
+            catch (InvalidAnimalIdException e)
+            {
+                isValid = false;
+                reason = e.getMessage();
+            }
+
+            returnJSON.put("isValid", isValid);
+            returnJSON.put("reason", reason);
+
+            return returnJSON;
+        }
+    }
+
+    public static class CheckAnimalAssignment
+    {
+        private String animalid;
+        private String projectid;
+        private Date date;
+
+        public String getAnimalid()
+        {
+            return animalid;
+        }
+
+        public void setAnimalid(String animalid)
+        {
+            this.animalid = animalid;
+        }
+
+        public String getProjectid()
+        {
+            return projectid;
+        }
+
+        public void setProjectid(String projectid)
+        {
+            this.projectid = projectid;
+        }
+
+        public Date getDate()
+        {
+            return date;
+        }
+
+        public void setDate(Date date)
+        {
+            this.date = date;
+        }
+    }
+
+    @RequiresLogin
+    @ActionNames("checkIfAnimalIsAssigned")
+    public static class CheckIfAnimalIsAssigned extends ApiAction<CheckAnimalAssignment>
+    {
+        @Override
+        public Object execute(CheckAnimalAssignment form, BindException errors)
+        {
+            JSONObject returnJSON = new JSONObject();
+            boolean assigned = false;
+
+            if (form.getDate() == null || form.getAnimalid() == null || form.getProjectid() == null)
+            {
+                throw new IllegalArgumentException("Date, animalid, and projectid are all required.");
+            }
+
+            try
+            {
+                ProjectVerifier pv = new ProjectVerifier(form.getProjectid(), getUser(), getContainer());
+
+                // Throws an error if the animal is assigned
+                pv.animalIsNotAssignedOn(form.getAnimalid(), form.getDate());
+
+            }
+            catch (InvalidProjectException e)
+            {
+                assigned = true;
+            }
+
+            returnJSON.put("assigned", assigned);
+
+            return returnJSON;
+        }
+    }
+
+    public static class UserForm
+    {
+        public String username;
+
+        public String getUsername()
+        {
+            return username;
+        }
+
+        public void setUsername(String username)
+        {
+            this.username = username;
+        }
+    }
+
+    @RequiresPermission(ReadPermission.class)
+    @ActionNames("getChanges")
+    @CSRF
+    public class GetChangeLists extends ApiAction<Void>
+    {
+        public ApiResponse execute(Void form, BindException errors) throws Exception
+        {
+            Map<String, Object> props = new HashMap<>();
+
+            // Grab the changelists directory
+            MergedDirectoryResource changelistDir = getModuleDataDir("changelists");
+
+            for (Resource resource : changelistDir.list())
+            {
+                if (resource.isFile())
+                { // Don't traverse subdirectories.
+                    File changelistFile = ((FileResource) resource).getFile();
+                    String filename = changelistFile.getAbsolutePath();
+                    String text = "";
+                    String errorText = "";
+
+                    if (changelistFile.canRead())
+                    {
+                        BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(changelistFile.getAbsolutePath()), "UTF-8"));
+
+                        String line = null;
+                        while ((line = reader.readLine()) != null)
+                        {
+                            text += '\n' + line;
+                        }
+                        reader.close();
+                    }
+
+                    HashMap<String, String> fileInfo = new HashMap<>();
+                    fileInfo.put("text", text);
+                    fileInfo.put("errorText", errorText);
+                    props.put(filename, fileInfo);
+                }
+            }
+
+            return new ApiSimpleResponse(props);
+        }
+    }
+
+    @RequiresPermission(ReadPermission.class)
+    @RequiresLogin
+    @ActionNames("getColonyPopulationPerMonth")
+    public class GetPopulationPerMonth extends ApiAction<Void>
+    {
+        public ApiResponse execute(Void form, BindException errors)
+        {
+            ColonyCensus colonyCensus = new ColonyCensus(getContainer(), getUser());
+            Map<String, Map<LocalDate, PopulationInstant>> populations = colonyCensus.getPopulationsPerMonthForAllSpecies();
+
+            Map<String, Object> props = new HashMap<>();
+            props.put("populations", populations);
+
+            return new ApiSimpleResponse(props);
+        }
+    }
+
+    @RequiresLogin
+    @ActionNames("getPopulationChangeEventsOverPeriod")
+    public class GetPopulationEventsOverPeriod extends ApiAction<PopulationEventsOverPeriodForm>
+    {
+        public ApiResponse execute(PopulationEventsOverPeriodForm form, BindException errors)
+        {
+            DateTime start = new DateTime(form.getStartdate());
+            DateTime end = new DateTime(form.getEnddate());
+
+            ColonyCensus colonyCensus = new ColonyCensus(getContainer(), getUser());
+            PopulationsOverTime pops = new PopulationsOverTime(start, end, colonyCensus, form.getSpeciesEnum());
+
+            EnhancedJsonResponse json = getEnhancedJsonResponse();
+            json.put("pops", pops);
+
+            return json;
+        }
+    }
+
+    @RequiresPermission(ReadPermission.class)
+    @CSRF
+    public class GetAnimalDemographicsForRoomAction extends ApiAction<GetAnimalDemographicsForRoomForm>
+    {
+        public ApiResponse execute(GetAnimalDemographicsForRoomForm form, BindException errors)
+        {
+            Map<String, Object> props = new HashMap<>();
+
+            if (form.getRoom() == null)
+            {
+                errors.reject(ERROR_MSG, "No Room Specified");
+                return null;
+            }
+
+            Results rs = null;
+            List<String> animalIds = new ArrayList<String>();
+
+            try
+            {
+                // Set up our query
+                SimpleFilter filter = new SimpleFilter(FieldKey.fromString("room"), form.getRoom());
+                QueryHelper animalListQuery = new QueryHelper(getContainer(), getUser(), "study", "demographicsCurLocation");
+
+                // Define columns to get
+                List<FieldKey> columns = new ArrayList<FieldKey>();
+                columns.add(FieldKey.fromString("room"));
+                columns.add(FieldKey.fromString("Id"));
+
+                // Execute the query
+                rs = animalListQuery.select(columns, filter);
+
+                // Now, execute it to get our list of Ids
+                if (rs.next())
+                {
+                    do
+                    {
+                        animalIds.add(rs.getString(FieldKey.fromString("Id")));
+                    }
+                    while (rs.next());
+                }
+
+                try
+                {
+                    JSONObject json = new JSONObject();
+                    for (AnimalRecord r : EHRDemographicsService.get().getAnimals(getContainer(), animalIds))
+                    {
+                        json.put(r.getId(), r.getProps());
+                    }
+
+                    props.put("results", json);
+                }
+                catch (Exception e)
+                {
+                    ExceptionUtil.logExceptionToMothership(getViewContext().getRequest(), e);
+                }
+            }
+            catch (SQLException e)
+            {
+                throw new RuntimeSQLException(e);
+            }
+            finally
+            {
+                ResultSetUtil.close(rs);
+            }
+
+            return new ApiSimpleResponse(props);
+        }
+    }
+
+    @RequiresLogin()
+    @ActionNames("billablePerDiems")
+    public class BillablePerDiemsAction extends ApiAction<BillablePerDiemsForm>
+    {
+        @Override
+        public Object execute(BillablePerDiemsForm form, BindException errors)
+        {
+            AssignmentPerDiems assignmentPerDiems = new AssignmentPerDiems(getContainer(), getUser(), form.getStartDate(), form.getEndDate());
+
+            return new EnhancedJsonResponse(assignmentPerDiems.getBillableDaysJSON());
+        }
+    }
+
+    @RequiresLogin()
+    @ActionNames("billablePerDiemsAsCSV")
+    public class BillablePerDiemsAsCSV extends ExportAction<BillablePerDiemsForm>
+    {
+        @Override
+        public void export(BillablePerDiemsForm form, HttpServletResponse response, BindException errors) throws Exception
+        {
+            AssignmentPerDiems assignmentPerDiems = new AssignmentPerDiems(getContainer(), getUser(), form.getStartDate(), form.getEndDate());
+            List<AssignmentPerDiems.BillableDay> billableDays = AssignmentPerDiems.consolidateBillableDays(assignmentPerDiems.getBillableDays());
+
+            // Prevent caching of the file.
+            response.setHeader("Cache-Control", "no-cache, no-store, must-revalidate"); // HTTP 1.1.
+            response.setHeader("Pragma", "no-cache"); // HTTP 1.0.
+            response.setHeader("Expires", "0"); // Proxies.
+
+            if (billableDays.size() == 0)
+            {
+                response.setContentType("text/plain");
+                setFilename(response, "billablePerDiems.txt");
+
+                ServletOutputStream out = response.getOutputStream();
+
+                out.println("There are no billable per-diem assignments for the time range of " + form.getStartDate().toString() + " to " + form.getEndDate().toString() + ".");
+
+
+                // Close up the pipeline
+                out.flush();
+                out.close();
+            }
+            else
+            {
+                response.setContentType("text/csv");
+                String filename = "billablePerDiems_" + form.getStartDate().toString() + "_" + form.getEndDate().toString() + ".csv";
+                setFilename(response, filename);
+
+                Boolean headerHasBeenPrinted = false;
+                CSVWriter csvOut = new CSVWriter(response.getWriter());
+
+                for (AssignmentPerDiems.BillableDay billableDay : billableDays)
+                {
+                    if (!headerHasBeenPrinted)
+                    {
+                        csvOut.writeNext(billableDay.csvHeaderLine);
+                        headerHasBeenPrinted = true;
+                    }
+
+                    csvOut.writeNext(billableDay.toCsvLine());
+                }
+
+                csvOut.flush();
+                csvOut.close();
+            }
+        }
+
+        private void setFilename(HttpServletResponse response, String filename)
+        {
+            // Set the filename in the header.
+            String headerKey = "Content-Disposition";
+            String headerValue = String.format("attachment; filename=\"%s\"", filename);
+            response.setHeader(headerKey, headerValue);
+        }
+    }
+
+    public class EmailModel
+    {
+        public HashMap<String, Map<String, String>> data = new HashMap<>();
+
+        public String getName()
+        {
+            return "Jon";
+        }
+
+        public java.lang.Void add(String area, String room, String ob)
+        {
+            Map areaMap = data.get(area);
+            if (areaMap == null)
+            {
+                areaMap = new HashMap<>();
+                data.put(area, areaMap);
+            }
+
+            areaMap.put(room, ob);
+            return null;
+        }
+
+        public java.lang.Void populateData()
+        {
+            this.add("a", "a142", "r12900");
+            this.add("a", "a142", "r12905");
+            this.add("a", "a144", "r12904");
+            this.add("b", "b12", "r12903");
+            return null;
+        }
+    }
+
+    @RequiresNoPermission()
+    public class ExampleEmailAction extends ApiAction<EmailForm>
+    {
+        @Override
+        public ApiResponse execute(EmailForm form, BindException errors) throws Exception
+        {
+            EmailModel model = new EmailModel();
+            model.populateData();
+            String name = form.getName();
+            if (name == null)
+            {
+                throw new Exception("You must supply a JSP template name.");
+            }
+            WNPRC_EHREmail<EmailModel> email = new WNPRC_EHREmail<>(form.getName());
+            String emailContents = email.renderEmail(model);
+
+            HashMap<String, String> props = new HashMap<>();
+            props.put("text", emailContents);
+
+            return new ApiSimpleResponse(props);
+        }
+    }
+
+    @ActionNames("listEmails")
+    @RequiresNoPermission()
+    public class ListEmailsAction extends ApiAction<EmailServerForm>
+    {
+        @Override
+        public ApiResponse execute(EmailServerForm form, BindException errors) throws Exception
+        {
+            return new ApiSimpleResponse(form.getEmailServer(getUser(), getContainer()).getInboxMessages());
+        }
+    }
+
+    @ActionNames("getVirologyResultsFromEmail")
+    @RequiresNoPermission()
+    public class GetVirologyResultsFromEmailAction extends ApiAction<VirologyResultsForm>
+    {
+        @Override
+        public ApiResponse execute(VirologyResultsForm form, BindException errors) throws Exception
+        {
+            JSONObject json = new JSONObject();
+
+            JSONArray rows = form.getEmailServer(getUser(), getContainer()).getExcelDataFromMessage(form.getMessageIdentifier());
+            json.put("rows", rows);
+
+            return new ApiSimpleResponse(json);
+        }
+    }
+
+    @ActionNames("deleteEmail")
+    @RequiresNoPermission()
+    public class deleteEmailAction extends ApiAction<VirologyResultsForm>
+    {
+        @Override
+        public ApiResponse execute(VirologyResultsForm form, BindException errors) throws Exception
+        {
+            JSONObject json = new JSONObject();
+
+            form.getEmailServer(getUser(), getContainer()).deleteMessage(form.getMessageIdentifier());
+
+            return new ApiSimpleResponse(json);
+        }
+    }
+
+    @ActionNames("previewEmailExcelAttachment")
+    @RequiresNoPermission()
+    public class previewEmailAction extends ApiAction<VirologyResultsForm>
+    {
+        @Override
+        public ApiResponse execute(VirologyResultsForm form, BindException errors) throws Exception
+        {
+            JSONObject json = new JSONObject();
+
+            JSONArray rows = form.getEmailServer(getUser(), getContainer()).getExcelPreviewData(form.getMessageIdentifier());
+            json.put("rows", rows);
+
+            JSONObject email = form.getEmailServer(getUser(), getContainer()).getInboxMessage(form.getMessageIdentifier());
+            json.put("emaildata", email);
+
+            WNPRC_EHREmail<JSONObject> tablePreview = new WNPRC_EHREmail<>("/org/labkey/wnprc_ehr/email/ExcelPreview.jsp");
+
+            json.put("html", tablePreview.renderEmail(json));
+            return new ApiSimpleResponse(json);
+        }
+    }
+
+    public abstract class WNPRCJspPageAction extends SimpleJspPageAction
+    {
+        @Override
+        public Module getModule()
+        {
+            return ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
+        }
+    }
+
+    public abstract class WNPRCReportPageAction extends SimpleJspReportAction
+    {
+        @Override
+        public Module getModule()
+        {
+            return ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
+        }
+    }
+
+    @ActionNames("NecropsySchedule")
+    @RequiresLogin()
+    public class NecropsyScheduleAction extends WNPRCJspPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/dataentry/NecropsySchedule.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Necropsy Schedule";
+        }
+    }
+
+    @ActionNames("SurgeryProcedureSchedule")
+    @RequiresLogin()
+    public class SurgeryProcedureScheduleAction extends WNPRCJspPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/dataentry/SurgeryProcedureSchedule.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Surgery/Procedure Schedule";
+        }
+    }
+
+    public static class SurgeryProcedureEvent
+    {
+        private String requestid;
+        private Date start;
+        private Date end;
+        private String room;
+        private String subject;
+        private List categories;
+        private String assignedto;
+        private boolean hold;
+
+        public String getRequestId()
+        {
+            return requestid;
+        }
+
+        public Date getStart()
+        {
+            return start;
+        }
+
+        public Date getEnd()
+        {
+            return end;
+        }
+
+        public String getRoom()
+        {
+            return room;
+        }
+
+        public String getSubject()
+        {
+            return subject;
+        }
+
+        public List getCategories() {
+            return categories;
+        }
+
+        public String getAssignedTo()
+        {
+            return assignedto;
+        }
+
+        public boolean getHold() {
+            return hold;
+        }
+
+        public void setRequestId(String requestid)
+        {
+            this.requestid = requestid;
+        }
+
+        public void setStart(Date start)
+        {
+            this.start = start;
+        }
+
+        public void setEnd(Date end)
+        {
+            this.end = end;
+        }
+
+        public void setRoom(String room)
+        {
+            this.room = room;
+        }
+
+        public void setSubject(String title)
+        {
+            this.subject = title;
+        }
+
+        public void setCategories(List categories)
+        {
+            this.categories = categories;
+        }
+
+        public void setAssignedTo(String assignedto)
+        {
+            this.assignedto = assignedto;
+        }
+
+        public void setHold(boolean hold) {
+            this.hold = hold;
+        }
+    }
+
+    @ActionNames("ScheduleSurgeryProcedure")
+    //TODO @RequiresPermission("SomeGroupPermissionSettingHere")
+    @RequiresLogin()
+    public class ScheduleSurgeryProcedureAction extends ApiAction<SurgeryProcedureEvent>
+    {
+        @Override
+        public Object execute(SurgeryProcedureEvent event, BindException errors) throws Exception
+        {
+            List<Map<String, Object>> spRows = getSurgeryProcedureRecords(event.getRequestId());
+
+            JSONObject response = new JSONObject();
+            response.put("success", false);
+            org.labkey.wnprc_ehr.calendar.Office365Calendar calendar = new org.labkey.wnprc_ehr.calendar.Office365Calendar();
+            String apptId = calendar.addEvent(event.getStart(), event.getEnd(), event.getRoom(), event.getSubject(), event.getRequestId(), event.getCategories(), event.hold);
+
+            if (apptId != null)
+            {
+                try (DbScope.Transaction transaction = WNPRC_Schema.getWnprcDbSchema().getScope().ensureTransaction()) {
+                    TableInfo ti = null;
+                    QueryUpdateService service =  null;
+                    List<Map<String, Object>> rowsToInsert = null;
+                    List<Map<String, Object>> rowsToUpdate = null;
+
+                    /**
+                     * Insert the necessary records into the ehr.tasks table
+                     */
+                    //TODO get other info from jsp
+                    for(Map<String, Object> spRow : spRows)
+                    {
+                        String taskId = UUID.randomUUID().toString();
+                        spRow.put("taskid", taskId);
+                        JSONObject taskRecord = new JSONObject();
+                        taskRecord.put("taskid", taskId);
+                        taskRecord.put("title", "SurgeryProcedure");
+                        taskRecord.put("category", "task");
+                        taskRecord.put("assignedto", event.getAssignedTo());
+                        taskRecord.put("qcstate", 10);
+                        taskRecord.put("duedate", "");
+                        taskRecord.put("formtype", "SurgeryProcedure");
+                        rowsToInsert = SimpleQueryUpdater.makeRowsCaseInsensitive(taskRecord);
+
+                        ti = QueryService.get().getUserSchema(getUser(), getContainer(), "ehr").getTable("tasks");
+                        service = ti.getUpdateService();
+
+                        BatchValidationException validationException = new BatchValidationException();
+                        List<Map<String, Object>> insertedRows = service.insertRows(getUser(), getContainer(), rowsToInsert, validationException, null, null);
+                        if (validationException.hasErrors())
+                        {
+                            throw validationException;
+                        }
+                    }
+
+                    /**
+                     * Update the surgery record(s) to contain the newly created taskid(s)
+                     */
+                    for(Map<String, Object> spRow : spRows)
+                    {
+                        //Initialize data to be updated and convert it to the necessary format
+                        JSONObject surgeryRecord = new JSONObject();
+                        surgeryRecord.put("objectid", spRow.get("objectid"));
+                        surgeryRecord.put("apptid", apptId);
+                        surgeryRecord.put("qcstate", 10);
+                        surgeryRecord.put("taskid", spRow.get("taskid"));
+                        surgeryRecord.put("date", event.getStart());
+                        surgeryRecord.put("enddate", event.getEnd());
+                        rowsToUpdate = SimpleQueryUpdater.makeRowsCaseInsensitive(surgeryRecord);
+
+                        //Get the service object based on schema/table
+                        ti = QueryService.get().getUserSchema(getUser(), getContainer(), "study").getTable("surgery_procedure");
+                        service = ti.getUpdateService();
+
+                        List<Map<String, Object>> updatedRows = service.updateRows(getUser(), getContainer(), rowsToUpdate, rowsToUpdate, null, null);
+                        if (updatedRows.size() != rowsToUpdate.size())
+                        {
+                            throw new QueryUpdateServiceException("Not all rows updated properly");
+                        }
+                    }
+
+                    //TODO look into permissions stuff... ti.hasPermission(getUser(), DeletePermission.class);
+
+                    //TODO add some logic to make sure rows were updated correctly
+
+                    JSONObject requestRecord = new JSONObject();
+                    requestRecord.put("requestid", event.getRequestId());
+                    requestRecord.put("qcstate", 8);
+                    rowsToUpdate = SimpleQueryUpdater.makeRowsCaseInsensitive(requestRecord);
+
+                    //Get the service object based on schema/table
+                    ti = QueryService.get().getUserSchema(getUser(), getContainer(), "ehr").getTable("requests");
+                    service = ti.getUpdateService();
+
+                    List<Map<String, Object>> updatedRows = service.updateRows(getUser(), getContainer(), rowsToUpdate, rowsToUpdate, null, null);
+                    if (updatedRows.size() != rowsToUpdate.size()) {
+                        throw new QueryUpdateServiceException("Not all rows updated properly");
+                    }
+
+                    transaction.commit();
+                    response.put("success", true);
+                } catch (Exception e) {
+                    calendar.cancelEvent(apptId);
+                } finally {
+
+                }
+            }
+            return response;
+        }
+    }
+
+    public static class SurgeryProcedureChangeStatusEvent
+    {
+        private String requestid;
+        private String qcstate;
+        private String statuschangereason;
+
+        public String getRequestId()
+        {
+            return requestid;
+        }
+
+        public String getQCState()
+        {
+            return qcstate;
+        }
+
+        public String getStatusChangeReason()
+        {
+            return statuschangereason;
+        }
+
+        public void setRequestId(String requestid)
+        {
+            this.requestid = requestid;
+        }
+
+        public void setQCState(String qcstate)
+        {
+            this.qcstate = qcstate;
+        }
+
+        public void setStatusChangeReason(String statuschangereason)
+        {
+            this.statuschangereason = statuschangereason;
+        }
+    }
+
+    @ActionNames("SurgeryProcedureChangeStatus")
+    //TODO @RequiresPermission("SomeGroupPermissionSettingHere")
+    @RequiresLogin()
+    public class SurgeryProcedureChangeStatusAction extends ApiAction<SurgeryProcedureChangeStatusEvent>
+    {
+        @Override
+        public Object execute(SurgeryProcedureChangeStatusEvent event, BindException errors) throws Exception
+        {
+            List<Map<String, Object>> spRows = getSurgeryProcedureRecords(event.getRequestId());
+
+            JSONObject response = new JSONObject();
+            response.put("success", false);
+
+            TableInfo ti = null;
+            QueryUpdateService service =  null;
+            List<Map<String, Object>> rowsToUpdate = null;
+
+            try (DbScope.Transaction transaction = WNPRC_Schema.getWnprcDbSchema().getScope().ensureTransaction()) {
+                /**
+                 * Update surgery records
+                 */
+                for(Map<String, Object> spRow : spRows)
+                {
+                    //Initialize data to be updated and convert it to the necessary format
+                    JSONObject surgeryRecord = new JSONObject();
+                    surgeryRecord.put("objectid", spRow.get("objectid"));
+                    surgeryRecord.put("qcstate", event.getQCState());
+                    surgeryRecord.put("statuschangereason", event.getStatusChangeReason());
+                    rowsToUpdate = SimpleQueryUpdater.makeRowsCaseInsensitive(surgeryRecord);
+
+                    //Get the service object based on schema/table
+                    ti = QueryService.get().getUserSchema(getUser(), getContainer(), "study").getTable("surgery_procedure");
+                    service = ti.getUpdateService();
+
+                    List<Map<String, Object>> updatedRows = service.updateRows(getUser(), getContainer(), rowsToUpdate, rowsToUpdate, null, null);
+                    if (updatedRows.size() != rowsToUpdate.size())
+                    {
+                        throw new QueryUpdateServiceException("Not all rows updated properly");
+                    }
+                }
+
+                /**
+                 * Update request record
+                 */
+                JSONObject requestRecord = new JSONObject();
+                requestRecord.put("requestid", event.getRequestId());
+                requestRecord.put("qcstate", event.getQCState());
+                requestRecord.put("remark", event.getStatusChangeReason());
+                rowsToUpdate = SimpleQueryUpdater.makeRowsCaseInsensitive(requestRecord);
+
+                //Get the service object based on schema/table
+                ti = QueryService.get().getUserSchema(getUser(), getContainer(), "ehr").getTable("requests");
+                service = ti.getUpdateService();
+
+                List<Map<String, Object>> updatedRows = service.updateRows(getUser(), getContainer(), rowsToUpdate, rowsToUpdate, null, null);
+                if (updatedRows.size() != rowsToUpdate.size()) {
+                    throw new QueryUpdateServiceException("Not all rows updated properly");
+                }
+
+                if ("5".equals(event.getQCState()))
+                {
+                    String apptid = null;
+                    if(spRows.size() > 0) {
+                        apptid = (String) spRows.get(0).get("apptid");
+                    }
+                    org.labkey.wnprc_ehr.calendar.Office365Calendar calendar = new org.labkey.wnprc_ehr.calendar.Office365Calendar();
+                    calendar.cancelEvent(apptid);
+                }
+
+                transaction.commit();
+                response.put("success", true);
+            } catch (Exception e) {
+                int x = 3;
+                //TODO nothing?
+            } finally {
+
+            }
+
+            return response;
+        }
+    }
+
+    private List<Map<String, Object>> getSurgeryProcedureRecords(String requestId) throws java.sql.SQLException
+    {
+        List<FieldKey> columns = new ArrayList<>();
+        columns.add(FieldKey.fromString("objectid"));
+        columns.add(FieldKey.fromString("apptid"));
+
+        SimpleFilter filter = new SimpleFilter(FieldKey.fromString("requestid"), requestId);
+        QueryHelper spQuery = new QueryHelper(getContainer(), getUser(), "study", "surgery_procedure");
+        Results rs = spQuery.select(columns, filter);
+
+        List<Map<String, Object>> spRows = new ArrayList<>();
+        while (rs.next())
+        {
+            spRows.add(rs.getRowMap());
+        }
+        return spRows;
+    }
+
+    @ActionNames("PathologyCaseList")
+    @RequiresLogin()
+    public class PathologyCaseListAction extends WNPRCJspPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/dataentry/PathologyCaseList.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Pathology Case List";
+        }
+    }
+
+    @ActionNames("NecropsyReport")
+    @RequiresLogin()
+    public class NecropsyReportAction extends WNPRCReportPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/dataentry/NecropsyReport.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Necropsy Report";
+        }
+    }
+
+    @ActionNames("NecropsyCollectionList")
+    @RequiresLogin()
+    public class NecropsyCollectionListAction extends WNPRCReportPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/dataentry/NecropsyCollectionList.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Necropsy Collection List";
+        }
+    }
+
+    @ActionNames("ColonyCensus")
+    @RequiresLogin()
+    public class ColonyCensusAction extends WNPRCJspPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/population_management/ColonyCensus.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Colony Census";
+        }
+    }
+
+    @ActionNames("PerDiems")
+    @RequiresLogin()
+    public class PerDiemsAction extends WNPRCJspPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/population_management/PerDiems.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Per Diems";
+        }
+    }
+
+    @ActionNames("AssignBehaviorProjects")
+    @RequiresLogin()
+    public class AssignBehaviorProjectsAction extends WNPRCJspPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/dataentry/behavior/AssignBehaviorProjects.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Assign Behavior Projects";
+        }
+    }
+
+    @ActionNames("DiarrheaAnalysis")
+    @RequiresLogin()
+    public class DiarrheaAnalysisPage extends WNPRCJspPageAction
+    {
+        @Override
+        public String getPathToJsp()
+        {
+            return "pages/clinical/DiarrheaAnalysis.jsp";
+        }
+
+        @Override
+        public String getTitle()
+        {
+            return "Diarrhea Analysis";
+        }
+    }
+
+    @RequiresLogin
+    public class AddBehaviorAssignmentAction extends ApiAction<AddBehaviorAssignmentForm>
+    {
+
+        @Override
+        public Object execute(AddBehaviorAssignmentForm form, BindException errors) throws Exception
+        {
+            BehaviorDataEntryService.get(getUser(), getContainer()).addBehaviorAssignment(
+                    form.getAnimalId(),
+                    form.getProject(),
+                    form.getAssignDate(),
+                    form.getEstimatedReleaseDate(),
+                    form.getRemark()
+            );
+
+            return null;
+        }
+    }
+
+    @RequiresSiteAdmin
+    @ActionNames("UploadBCReports")
+    public class uploadBCReportAction extends ApiAction<Void>
+    {
+        @Override
+        public Object execute(Void form, BindException errors) throws NotFoundException
+        {
+            BCReportManager manager = new BCReportManager(getUser(), getContainer());
+            manager.uploadReports();
+
+            return new JSONObject();
+        }
+    }
+
+    @RequiresSiteAdmin
+    @ActionNames("MakeUserWriterForBCReports")
+    public class ShareBCReportsWithUserAction extends ApiAction<UserForm>
+    {
+        @Override
+        public Object execute(UserForm form, BindException errors) throws Exception
+        {
+            WNPRC_EHRModule wnprc = ModuleLoader.getInstance().getModule(WNPRC_EHRModule.class);
+            String id = wnprc.getGoogleDriveAccountId(getContainer());
+
+            DriveWrapper drive = GoogleDriveService.get().getDrive(id, getUser());
+            FolderWrapper bcFolder = drive.getFolder(BusinessContinuityReport.BusinessContinuityFolderName);
+
+            bcFolder.shareWithUser(form.getUsername(), DriveSharePermission.WRITER);
+
+            return new JSONObject();
+        }
+    }
+
+    @RequiresSiteAdmin
+    @ActionNames("ScheduleBCReports")
+    public class ScheduleBCReportsAction extends ApiAction<Void>
+    {
+        @Override
+        public Object execute(Void form, BindException errors)
+        {
+            BCReportRunner.schedule();
+            return new JSONObject();
+        }
+    }
+
+    @RequiresSiteAdmin
+    @ActionNames("UnscheduleBCReports")
+    public class UnscheduleBCReportsAction extends ApiAction<Void>
+    {
+        @Override
+        public Object execute(Void form, BindException errors)
+        {
+            BCReportRunner.unschedule();
+            return new JSONObject();
+        }
+    }
+
+    /**
+     * Redirects the data entry for a task to either /ehr/&lt;container&gt;/manageTask.view? or
+     * /ehr/&lt;container&gt;/dataEntryForm.view? depending on the form type.
+     */
+    @SuppressWarnings("unused")
+    @RequiresLogin
+    @ActionNames("manageWnprcTask")
+    public class ManageWnprcTaskAction extends RedirectAction<java.lang.Void>
+    {
+        // these constants are here to hopefully prevent us from mistyping the capitalization
+        // later in the method. also, they should be different enough to avoid one-off typos
+        // - clay, 23 Jan 2018
+        private static final String CAMELCASE_FORMTYPE = "formType";
+        private static final String LOWERCASE_FORMTYPE = "formtype";
+
+        @Override
+        public URLHelper getSuccessURL(java.lang.Void aVoid)
+        {
+            ActionURL oldUrl = getViewContext().getActionURL();
+            ActionURL newUrl;
+            Map<String, String[]> params = oldUrl.getParameterMap();
+            // just to be safe, make sure we're reading the form type regardless of the capitalization
+            // (it _should_ be all lowercase, but we should check anyway)
+            String formType = MoreObjects.firstNonNull(
+                    oldUrl.getParameter(LOWERCASE_FORMTYPE),
+                    oldUrl.getParameter(CAMELCASE_FORMTYPE));
+            switch (formType)
+            {
+                // this is the list of things that need redirected to the dataEntryForm.view in the EHR
+                // module (the ExtJS 4 version, which is built from the other data entry Java classes)
+                case "Necropsy":
+                case "Breeding Encounter":
+                    newUrl = new ActionURL(String.format("/ehr%s/dataEntryForm.view",
+                            getContainer().getPath()));
+                    // the ExtJS 4 data entry form expects "formType" with a capital 'T'
+                    if (params.containsKey(LOWERCASE_FORMTYPE))
+                        params.put(CAMELCASE_FORMTYPE, params.remove(LOWERCASE_FORMTYPE));
+                    newUrl.addParameters(params);
+                    break;
+                // by default, all non-specified redirects will go to the manageTask.view in the EHR
+                // module, which builds the forms in ExtJS 3 from the form types/sections defined in
+                // the database (via the EHR module)
+                default:
+                    newUrl = new ActionURL(String.format("/ehr%s/manageTask.view",
+                            getContainer().getPath()));
+                    // the ExtJS 3 data entry form expects "formtype" all lower case
+                    if (params.containsKey(CAMELCASE_FORMTYPE))
+                        params.put(LOWERCASE_FORMTYPE, params.remove(CAMELCASE_FORMTYPE));
+                    newUrl.addParameters(params);
+                    break;
+            }
+            return newUrl;
+        }
+
+        @Override
+        public boolean doAction(java.lang.Void aVoid, BindException errors)
+        {
+            return true;
+        }
+    }
 }
\ No newline at end of file
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRModule.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRModule.java
index d9c288a0..6c753b57 100644
--- a/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRModule.java
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/WNPRC_EHRModule.java
@@ -74,6 +74,8 @@ import org.labkey.wnprc_ehr.dataentry.forms.PhysicalExamOWM.PhysicalExamOWMForm;
 import org.labkey.wnprc_ehr.dataentry.forms.ProblemList.ProblemListForm;
 import org.labkey.wnprc_ehr.dataentry.forms.ProcedureRequest.ProcedureRequestForm;
 import org.labkey.wnprc_ehr.dataentry.forms.Surgery.SurgeryForm;
+import org.labkey.wnprc_ehr.dataentry.forms.Surgery.SurgeryProcedureMultipleRequestForm;
+import org.labkey.wnprc_ehr.dataentry.forms.Surgery.SurgeryProcedureRequestForm;
 import org.labkey.wnprc_ehr.dataentry.forms.TBTests.TBTestsForm;
 import org.labkey.wnprc_ehr.dataentry.forms.TreatmentOrders.TreatmentOrdersForm;
 import org.labkey.wnprc_ehr.dataentry.forms.Treatments.TreatmentsForm;
@@ -383,6 +385,8 @@ public class WNPRC_EHRModule extends ExtendedSimpleModule
                 MPRForm.class,
                 NecropsyForm.class,
                 NecropsyRequestForm.class,
+                SurgeryProcedureRequestForm.class,
+                SurgeryProcedureMultipleRequestForm.class,
                 PhysicalExamNWMForm.class,
                 PhysicalExamOWMForm.class,
                 ProblemListForm.class,
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/calendar/GoogleCalendar.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/calendar/GoogleCalendar.java
new file mode 100644
index 00000000..341aa411
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/calendar/GoogleCalendar.java
@@ -0,0 +1,163 @@
+package org.labkey.wnprc_ehr.calendar;
+
+import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
+import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
+import com.google.api.client.http.HttpTransport;
+import com.google.api.client.json.JsonFactory;
+import com.google.api.client.json.jackson2.JacksonFactory;
+import com.google.api.client.util.DateTime;
+import com.google.api.services.calendar.Calendar;
+import com.google.api.services.calendar.CalendarScopes;
+import com.google.api.services.calendar.model.Event;
+import com.google.api.services.calendar.model.EventDateTime;
+import com.google.api.services.calendar.model.Events;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.labkey.api.data.CompareType;
+import org.labkey.api.data.Container;
+import org.labkey.api.data.DbSchema;
+import org.labkey.api.data.DbSchemaType;
+import org.labkey.api.data.TableInfo;
+import org.labkey.api.data.TableSelector;
+import org.labkey.api.security.User;
+import org.labkey.dbutils.api.SimpleQuery;
+import org.labkey.dbutils.api.SimpleQueryFactory;
+import org.labkey.dbutils.api.SimplerFilter;
+import org.labkey.webutils.api.json.JsonUtils;
+
+import java.io.ByteArrayInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class GoogleCalendar
+{
+    private User user;
+    private Container container;
+
+    /** Application name. */
+    private static final String APPLICATION_NAME =
+            "Google Calendar API Java Quickstart";
+
+    /** Global instance of the JSON factory. */
+    private static final JsonFactory JSON_FACTORY =
+            JacksonFactory.getDefaultInstance();
+
+    /** Global instance of the HTTP transport. */
+    private static HttpTransport HTTP_TRANSPORT;
+
+    /** Global instance of the scopes required by this quickstart.
+     *
+     * If modifying these scopes, delete your previously saved credentials
+     * at ~/.credentials/calendar-java-quickstart
+     */
+    private static final List<String> SCOPES =
+            Arrays.asList(CalendarScopes.CALENDAR_READONLY);
+
+    static {
+        try {
+            HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
+        } catch (Throwable t) {
+            t.printStackTrace();
+            System.exit(1);
+        }
+    }
+
+    public void setUser(User u) {
+        user = u;
+    }
+
+    public void setContainer(Container c) {
+        container = c;
+    }
+
+    private JSONArray getJsonEventList(List<Event> events) {
+        JSONArray jsonEvents = new JSONArray();
+
+
+        for(Event event : events) {
+            JSONObject jsonEvent = new JSONObject();
+            jsonEvent.put("title", event.getSummary());
+            jsonEvent.put("start", event.getStart() != null ? event.getStart().getDate() : null);
+            jsonEvent.put("end", event.getEnd() != null ? event.getEnd().getDate() : null);
+            jsonEvent.put("htmlLink", event.getHtmlLink());
+
+            jsonEvents.put(jsonEvent);
+        }
+        return jsonEvents;
+    }
+
+    private JSONArray getJsonEventList(Event event) {
+        List<Event> eventList = new ArrayList<>();
+        eventList.add(event);
+        return getJsonEventList(eventList);
+    }
+
+    private InputStream mapToInputStream(Map<String, Object> map) {
+        InputStream is = null;
+        JSONObject json = new JSONObject();
+        json.put("type", "service_account");
+        for (Map.Entry<String, Object> entry : map.entrySet()) {
+            json.put(entry.getKey(), entry.getValue());
+        }
+
+        try {
+            is = new ByteArrayInputStream(json.toString().getBytes(StandardCharsets.UTF_8));
+        } catch (Exception e) {
+
+        }
+
+        return is;
+    }
+
+    private Calendar getCalendar() throws IOException {
+        SimplerFilter filter = new SimplerFilter("id", CompareType.EQUAL, "f5c49137-186d-41fb-9c93-9979b7f4c2ba");
+        DbSchema schema = DbSchema.get("googledrive", DbSchemaType.Module);
+        TableInfo ti = schema.getTable("service_accounts");
+        TableSelector ts = new TableSelector(ti, filter, null);
+        InputStream is = mapToInputStream(ts.getMap());
+        GoogleCredential credential = GoogleCredential.fromStream(is).createScoped(SCOPES);
+
+        Calendar service = new Calendar.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)
+                .setApplicationName(APPLICATION_NAME)
+                .build();
+        return service;
+    }
+
+    private String getCalendarEvents(Calendar calendar, DateTime minTime, Integer maxResults) throws IOException {
+        String eventsString = null;
+        Events events = calendar.events().list("f5uogvepmaroft2dh30fqh7g7o@group.calendar.google.com")
+                .setMaxResults(maxResults)
+                .setTimeMin(minTime)
+                .setOrderBy("startTime")
+                .setSingleEvents(true)
+                .execute();
+        List<Event> items = events.getItems();
+
+        JSONArray jsonEvents = getJsonEventList(items);
+        eventsString = jsonEvents.toString();
+
+        return eventsString;
+    }
+
+    public String getCalendarEventsAsJson() {
+        String events;
+        try {
+            Calendar calendar = getCalendar();
+            DateTime dateMin = new DateTime(0);
+            events = getCalendarEvents(calendar, dateMin, Integer.MAX_VALUE);
+        } catch (Exception e) {
+            Event error = new Event();
+            error.setStart(new EventDateTime().setDate(new DateTime(true, System.currentTimeMillis(), null)));
+            error.setSummary("Error Loading Calendar!!");
+            events = getJsonEventList(error).toString();
+        }
+
+        return events;
+    }
+}
\ No newline at end of file
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/calendar/Office365Calendar.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/calendar/Office365Calendar.java
new file mode 100644
index 00000000..6347c976
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/calendar/Office365Calendar.java
@@ -0,0 +1,378 @@
+package org.labkey.wnprc_ehr.calendar;
+
+import microsoft.exchange.webservices.data.autodiscover.IAutodiscoverRedirectionUrl;
+import microsoft.exchange.webservices.data.autodiscover.exception.AutodiscoverLocalException;
+import microsoft.exchange.webservices.data.core.ExchangeService;
+import microsoft.exchange.webservices.data.core.PropertySet;
+import microsoft.exchange.webservices.data.core.enumeration.availability.AvailabilityData;
+import microsoft.exchange.webservices.data.core.enumeration.misc.ExchangeVersion;
+import microsoft.exchange.webservices.data.core.enumeration.misc.error.ServiceError;
+import microsoft.exchange.webservices.data.core.enumeration.property.BodyType;
+import microsoft.exchange.webservices.data.core.enumeration.property.LegacyFreeBusyStatus;
+import microsoft.exchange.webservices.data.core.enumeration.property.WellKnownFolderName;
+import microsoft.exchange.webservices.data.core.enumeration.service.DeleteMode;
+import microsoft.exchange.webservices.data.core.response.AttendeeAvailability;
+import microsoft.exchange.webservices.data.core.response.ServiceResponseCollection;
+import microsoft.exchange.webservices.data.core.service.folder.CalendarFolder;
+import microsoft.exchange.webservices.data.core.service.item.Appointment;
+import microsoft.exchange.webservices.data.credential.ExchangeCredentials;
+import microsoft.exchange.webservices.data.credential.WebCredentials;
+import microsoft.exchange.webservices.data.misc.availability.AttendeeInfo;
+import microsoft.exchange.webservices.data.misc.availability.GetUserAvailabilityResults;
+import microsoft.exchange.webservices.data.misc.availability.TimeWindow;
+import microsoft.exchange.webservices.data.property.complex.Attendee;
+import microsoft.exchange.webservices.data.property.complex.AttendeeCollection;
+import microsoft.exchange.webservices.data.property.complex.ItemId;
+import microsoft.exchange.webservices.data.property.complex.MessageBody;
+import microsoft.exchange.webservices.data.property.complex.StringList;
+import microsoft.exchange.webservices.data.property.complex.availability.CalendarEvent;
+import microsoft.exchange.webservices.data.property.complex.availability.Suggestion;
+import microsoft.exchange.webservices.data.property.complex.availability.TimeSuggestion;
+import microsoft.exchange.webservices.data.search.CalendarView;
+import microsoft.exchange.webservices.data.search.FindItemsResults;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.labkey.api.data.CompareType;
+import org.labkey.api.data.Container;
+import org.labkey.api.data.DbSchema;
+import org.labkey.api.data.DbSchemaType;
+import org.labkey.api.data.TableInfo;
+import org.labkey.api.data.TableSelector;
+import org.labkey.api.security.User;
+import org.labkey.dbutils.api.SimpleQuery;
+import org.labkey.dbutils.api.SimpleQueryFactory;
+import org.labkey.dbutils.api.SimplerFilter;
+import org.labkey.webutils.api.json.JsonUtils;
+import org.labkey.wnprc_ehr.encryption.AES;
+
+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+public class Office365Calendar
+{
+    public static final ExchangeService service = new ExchangeService(ExchangeVersion.Exchange2010_SP2);
+    //private static final SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+    private User user;
+    private Container container;
+
+    public void setUser(User u)
+    {
+        user = u;
+    }
+
+    public void setContainer(Container c)
+    {
+        container = c;
+    }
+
+    public void authenticate()
+    {
+        String emailAddress = null;
+        try
+        {
+            SimplerFilter filter = new SimplerFilter("id", CompareType.EQUAL, "0ddbf045-1cfc-4cc5-8571-4028a92a5011");
+            DbSchema schema = DbSchema.get("googledrive", DbSchemaType.Module);
+            TableInfo ti = schema.getTable("service_accounts");
+            TableSelector ts = new TableSelector(ti, filter, null);
+            Map map = ts.getMap();
+            emailAddress = (String) map.get("private_key_id");
+
+            String[] bytes = ((String) map.get("private_key")).split(",");
+            byte[] decrypted = AES.decrypt(bytes);
+
+            ExchangeCredentials credentials = new WebCredentials(emailAddress, new String(decrypted, StandardCharsets.UTF_8));
+            service.setCredentials(credentials);
+            URI uri = new URI("https://outlook.office365.com/EWS/Exchange.asmx");
+            service.setUrl(uri);
+            //service.autodiscoverUrl(emailAddress, new RedirectionUrlCallback());
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+        }
+    }
+
+    public boolean isRoomAvailable(String roomEmailAddress, Date start, Date end)
+    {
+        boolean isAvailable = true;
+        try
+        {
+            // Create a list of attendees for which to request availability
+            // information and meeting time suggestions.
+
+            List<AttendeeInfo> attendees = new ArrayList<>();
+            attendees.add(new AttendeeInfo(roomEmailAddress));
+
+            TimeWindow surgeryTimeWindow = new TimeWindow(start, end);
+            Calendar cal = Calendar.getInstance();
+            cal.setTime(start);
+            cal.set(Calendar.HOUR_OF_DAY, 0);
+            cal.set(Calendar.MINUTE, 0);
+            cal.set(Calendar.SECOND, 0);
+            cal.set(Calendar.MILLISECOND, 0);
+            Date d1 = new Date(cal.getTimeInMillis());
+            cal.setTime(end);
+            cal.set(Calendar.HOUR_OF_DAY, 23);
+            cal.set(Calendar.MINUTE, 59);
+            cal.set(Calendar.SECOND, 59);
+            cal.set(Calendar.MILLISECOND, 999);
+            Date d2 = new Date(cal.getTimeInMillis());
+
+            // Call the availability service.
+            GetUserAvailabilityResults results = service.getUserAvailability(
+                    attendees,
+                    new TimeWindow(d1, d2),
+                    AvailabilityData.FreeBusy);
+
+            for (AttendeeAvailability attendeeAvailability : results.getAttendeesAvailability())
+            {
+                if (attendeeAvailability.getErrorCode() == ServiceError.NoError)
+                {
+                    for (CalendarEvent calendarEvent : attendeeAvailability.getCalendarEvents())
+                    {
+                        TimeWindow eventTimeWindow = new TimeWindow(calendarEvent.getStartTime(), calendarEvent.getEndTime());
+                        calendarEvent.getFreeBusyStatus();
+                        if (isOverlapping(surgeryTimeWindow, eventTimeWindow) && isBusy(calendarEvent))
+                        {
+                            isAvailable = false;
+                            break;
+                        }
+                    }
+                }
+                else
+                {
+                    isAvailable = false;
+                }
+            }
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+            //TODO fix this!
+        }
+        return isAvailable;
+    }
+
+    private boolean isOverlapping(TimeWindow t1, TimeWindow t2)
+    {
+        return t1.getStartTime().before(t2.getEndTime()) && t2.getStartTime().before(t1.getEndTime());
+    }
+
+    private boolean isBusy(CalendarEvent calendarEvent)
+    {
+        LegacyFreeBusyStatus status = calendarEvent.getFreeBusyStatus();
+        boolean cancelled = calendarEvent.getDetails().getSubject().startsWith("Canceled:");
+        return status != LegacyFreeBusyStatus.Free || !cancelled;
+    }
+
+    public String addEvent(Date start, Date end, String room, String subject, String requestId, List categories, boolean hold)
+    {
+        String apptId = null;
+        try
+        {
+            SimplerFilter filter = new SimplerFilter("room", CompareType.EQUAL, room);
+            DbSchema schema = DbSchema.get("wnprc", DbSchemaType.Module);
+            TableInfo ti = schema.getTable("surgery_procedure_rooms");
+            TableSelector ts = new TableSelector(ti, filter, null);
+            Map map = ts.getMap();
+            String roomEmailAddress = (String) map.get("email");
+            if (isRoomAvailable(roomEmailAddress, start, end))
+            {
+                Appointment appt = new Appointment(service);
+                appt.setStart(start);
+                appt.setEnd(end);
+                appt.setSubject(subject);
+                if (hold) {
+                    appt.setBody(new MessageBody(BodyType.Text, "Hold:" + requestId));
+                } else {
+                    appt.setBody(new MessageBody(BodyType.Text, requestId));
+                }
+                appt.setCategories(new StringList(categories));
+                appt.getRequiredAttendees().add(roomEmailAddress);
+                appt.save();
+                apptId = appt.getId().getUniqueId();
+            }
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+            //TODO DO NOTHING
+        }
+        return apptId;
+    }
+
+    public boolean confirmEvent(String apptId, String requestId) {
+        boolean updated = false;
+        try
+        {
+            Appointment appt = Appointment.bind(service, new ItemId(apptId));
+            appt.setBody(new MessageBody(BodyType.Text, requestId));
+            updated = true;
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+            //TODO error handling
+        }
+        return updated;
+    }
+
+    public void cancelEvent(String apptId) throws Exception
+    {
+        Appointment appt = Appointment.bind(service, new ItemId(apptId));
+        appt.cancelMeeting();
+    }
+
+    private JSONArray getJsonEventList(List<Appointment> events)
+    {
+        JSONArray jsonEvents = new JSONArray();
+
+        SimpleQueryFactory sqf = new SimpleQueryFactory(user, container);
+        SimpleQuery requests = sqf.makeQuery("study", "SurgeryProcedureSchedule");
+        //JSONObject bar = requests.getResults();
+        List<JSONObject> requestList = JsonUtils.getListFromJSONArray(requests.getResults().getJSONArray("rows"));
+
+        Map<String, JSONObject> queryResults = new HashMap<>();
+        for (JSONObject o : requestList)
+        {
+            queryResults.put(o.getString("requestid"), o);
+        }
+
+        try
+        {
+            for (Appointment event : events)
+            {
+                boolean hold = false;
+                event.load(PropertySet.FirstClassProperties);
+                String requestId = event.getBody().toString();
+                if(requestId != null && requestId.startsWith("Hold")) {
+                    requestId = requestId.substring(5);
+                    hold = true;
+                }
+                JSONObject surgeryInfo = queryResults.get(requestId);
+
+                JSONObject jsonEvent = new JSONObject();
+                jsonEvent.put("title", event.getSubject());
+                jsonEvent.put("start", event.getStart() != null ? event.getStart() : null);
+                jsonEvent.put("end", event.getEnd() != null ? event.getEnd() : null);
+
+                //Add data for details panel on Surgery Schedule page
+                JSONObject rawRowData = new JSONObject();
+                if (surgeryInfo != null)
+                {
+                    rawRowData.put("lsid", surgeryInfo.get("lsid"));
+                    rawRowData.put("taskid", surgeryInfo.get("taskid"));
+                    rawRowData.put("objectid", surgeryInfo.get("objectid"));
+                    rawRowData.put("requestid", surgeryInfo.get("requestid"));
+                    rawRowData.put("procedure", surgeryInfo.get("procedure"));
+
+                    rawRowData.put("age", surgeryInfo.get("age"));
+                    rawRowData.put("animalid", surgeryInfo.get("animalid"));
+                    rawRowData.put("date", surgeryInfo.get("date"));
+                    rawRowData.put("account", surgeryInfo.get("account"));
+                    rawRowData.put("cur_room", surgeryInfo.get("cur_room"));
+                    rawRowData.put("cur_cage", surgeryInfo.get("cur_cage"));
+                    rawRowData.put("cur_cond", surgeryInfo.get("cur_cond"));
+                    rawRowData.put("location", surgeryInfo.get("location"));
+                    rawRowData.put("medical", surgeryInfo.get("medical"));
+                    rawRowData.put("project", surgeryInfo.get("project"));
+                    rawRowData.put("protocol", surgeryInfo.get("protocol"));
+                    rawRowData.put("sex", surgeryInfo.get("sex"));
+                    rawRowData.put("weight", surgeryInfo.get("weight"));
+                    rawRowData.put("date", surgeryInfo.get("date"));
+                    rawRowData.put("enddate", surgeryInfo.get("enddate"));
+                    rawRowData.put("comments", surgeryInfo.get("comments"));
+                    rawRowData.put("hold", hold);
+                    jsonEvent.put("rawRowData", rawRowData);
+                }
+
+                jsonEvents.put(jsonEvent);
+            }
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+            //FIXME WHAT?
+        }
+        return jsonEvents;
+    }
+
+    private String getCalendarEvents(Date startDate, Date endDate, boolean held)
+    {
+        String eventsString = null;
+
+        try
+        {
+            JSONArray jsonEvents = getJsonEventList(getAppointments(startDate, endDate, held));
+            eventsString = jsonEvents.toString();
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+            //TODO fix!
+        }
+        return eventsString;
+    }
+
+    private List<Appointment> getAppointments(Date startDate, Date endDate, boolean held)
+    {
+        List<Appointment> allAppts = new ArrayList<>();
+        List<Appointment> appts = new ArrayList<>();
+        try
+        {
+            CalendarFolder cf = CalendarFolder.bind(service, WellKnownFolderName.Calendar);
+            FindItemsResults<Appointment> findResults = cf.findAppointments(new CalendarView(startDate, endDate));
+            allAppts = findResults.getItems();
+            for (Appointment appt : allAppts) {
+                appt.load(PropertySet.FirstClassProperties);
+                if (held && appt.getBody() != null && appt.getBody().toString().startsWith("Hold")) {
+                    appts.add(appt);
+                } else if (!held && appt.getBody() != null && !appt.getBody().toString().startsWith("Hold")) {
+                    appts.add(appt);
+                }
+            }
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+            //FIXME fix!
+        }
+        return appts;
+    }
+
+    public String getCalendarEventsAsJson(boolean held)
+    {
+        String events = "";
+        try
+        {
+            authenticate();
+            Calendar cal = Calendar.getInstance();
+            cal.add(Calendar.MONTH, -2);
+            Date startDate = cal.getTime();
+            cal.add(Calendar.MONTH, 23);
+            Date endDate = cal.getTime();
+            events = getCalendarEvents(startDate, endDate, held);
+        }
+        catch (Exception e)
+        {
+            int x = 3;
+            //FIXME add error handling
+        }
+        return events;
+    }
+
+    static class RedirectionUrlCallback implements IAutodiscoverRedirectionUrl
+    {
+        public boolean autodiscoverRedirectionUrlValidationCallback(
+                String redirectionUrl)
+        {
+            return redirectionUrl.toLowerCase().startsWith("https://");
+        }
+    }
+}
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/FormSections/SurgeryProcedureMultipleRequestSection.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/FormSections/SurgeryProcedureMultipleRequestSection.java
new file mode 100644
index 00000000..3b4a9cb6
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/FormSections/SurgeryProcedureMultipleRequestSection.java
@@ -0,0 +1,54 @@
+package org.labkey.wnprc_ehr.dataentry.forms.Surgery.FormSections;
+
+import org.labkey.wnprc_ehr.dataentry.generics.sections.SimpleGridSection;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class SurgeryProcedureMultipleRequestSection extends SimpleGridSection
+{
+    public SurgeryProcedureMultipleRequestSection() {
+        super("study", "surgery_procedure", "Surgery/Procedure");
+        //setTemplateMode(TEMPLATE_MODE.NONE);
+
+        //this.maxItemsPerColumn = 14;
+
+        //setClientStoreClass("WNPRC.ext.data.SingleAnimal.SurgeryProcedureClientStore");
+    }
+
+    @Override
+    protected List<String> getFieldNames() {
+        return Arrays.asList(
+                "Id",
+                "date",
+                "enddate",
+                "proceduretype",
+                "procedurename",
+                "location",
+                "project",
+                "account",
+                "surgeon",
+                "consultRequest",
+                "biopsyNeeded",
+                "surgerytechneeded",
+                "spineeded",
+                "vetneeded",
+                "vetneededreason",
+                "equipment",
+                "drugslab",
+                "drugssurgery",
+                "comments"
+        );
+    }
+
+//    @Override
+//    public List<String> getTbarButtons() {
+//        List<String> defaultButtons = new ArrayList<>();
+//        defaultButtons.addAll(super.getTbarButtons());
+//
+//        defaultButtons.remove("COPYFROMSECTION");
+//
+//        return defaultButtons;
+//    }
+}
\ No newline at end of file
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/FormSections/SurgeryProcedureRequestSection.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/FormSections/SurgeryProcedureRequestSection.java
new file mode 100644
index 00000000..86e4e52d
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/FormSections/SurgeryProcedureRequestSection.java
@@ -0,0 +1,43 @@
+package org.labkey.wnprc_ehr.dataentry.forms.Surgery.FormSections;
+
+import org.labkey.wnprc_ehr.dataentry.generics.sections.SimpleFormSection;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class SurgeryProcedureRequestSection extends SimpleFormSection
+{
+    public SurgeryProcedureRequestSection() {
+        super("study", "surgery_procedure", "Surgery/Procedure");
+        //setTemplateMode(TEMPLATE_MODE.NONE);
+
+        this.maxItemsPerColumn = 14;
+
+        //setClientStoreClass("WNPRC.ext.data.SingleAnimal.SurgeryProcedureClientStore");
+    }
+
+    @Override
+    protected List<String> getFieldNames() {
+        return Arrays.asList(
+                "Id",
+                "date",
+                "enddate",
+                "proceduretype",
+                "procedurename",
+                "location",
+                "project",
+                "account",
+                "surgeon",
+                "consultRequest",
+                "biopsyNeeded",
+                "surgerytechneeded",
+                "spineeded",
+                "vetneeded",
+                "vetneededreason",
+                "equipment",
+                "drugslab",
+                "drugssurgery",
+                "comments"
+        );
+    }
+}
\ No newline at end of file
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/SurgeryProcedureMultipleRequestForm.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/SurgeryProcedureMultipleRequestForm.java
new file mode 100644
index 00000000..ca387e90
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/SurgeryProcedureMultipleRequestForm.java
@@ -0,0 +1,47 @@
+package org.labkey.wnprc_ehr.dataentry.forms.Surgery;
+
+import org.labkey.api.ehr.dataentry.DataEntryFormContext;
+import org.labkey.api.ehr.dataentry.FormSection;
+import org.labkey.api.ehr.dataentry.RequestFormSection;
+import org.labkey.api.module.Module;
+import org.labkey.api.view.template.ClientDependency;
+import org.labkey.wnprc_ehr.WNPRCConstants;
+import org.labkey.wnprc_ehr.dataentry.forms.Surgery.FormSections.SurgeryProcedureMultipleRequestSection;
+import org.labkey.wnprc_ehr.dataentry.forms.Surgery.FormSections.SurgeryProcedureRequestSection;
+import org.labkey.wnprc_ehr.dataentry.generics.forms.SimpleRequestForm;
+import org.labkey.wnprc_ehr.dataentry.generics.sections.AnimalDetailsPanel;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class SurgeryProcedureMultipleRequestForm extends SimpleRequestForm
+{
+
+    public static final String NAME = "SurgeryProcedureMultipleRequest";
+
+    public SurgeryProcedureMultipleRequestForm(DataEntryFormContext ctx, Module owner) {
+        super(ctx, owner, NAME, "Request Multiple Surgery/Procedure", WNPRCConstants.DataEntrySections.PATHOLOGY_CLINPATH, Arrays.<FormSection>asList(
+                new RequestFormSection(),
+                new SurgeryProcedureMultipleRequestSection(),
+                new AnimalDetailsPanel()
+        ));
+
+        for(FormSection section: this.getFormSections()) {
+            section.addConfigSource("SurgeryProcedureMultipleRequest");
+        }
+
+        this.addClientDependency(ClientDependency.fromPath("wnprc_ehr/model/sources/SurgeryProcedureMultipleRequest.js"));
+    }
+
+    @Override
+    protected List<String> getButtonConfigs() {
+        List<String> buttons = new ArrayList<>();
+        buttons.addAll(super.getButtonConfigs());
+
+        buttons.remove("REQUEST");
+        buttons.add("WNPRC_REQUEST");
+
+        return buttons;
+    }
+}
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/SurgeryProcedureRequestForm.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/SurgeryProcedureRequestForm.java
new file mode 100644
index 00000000..2ca4106f
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/dataentry/forms/Surgery/SurgeryProcedureRequestForm.java
@@ -0,0 +1,47 @@
+package org.labkey.wnprc_ehr.dataentry.forms.Surgery;
+
+import org.labkey.api.ehr.dataentry.DataEntryFormContext;
+import org.labkey.api.ehr.dataentry.FormSection;
+import org.labkey.api.ehr.dataentry.RequestFormSection;
+import org.labkey.api.module.Module;
+import org.labkey.api.view.template.ClientDependency;
+import org.labkey.wnprc_ehr.WNPRCConstants;
+import org.labkey.wnprc_ehr.dataentry.forms.Surgery.FormSections.SurgeryProcedureRequestSection;
+import org.labkey.wnprc_ehr.dataentry.generics.forms.SimpleRequestForm;
+import org.labkey.wnprc_ehr.dataentry.generics.sections.AnimalDetailsPanel;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+public class SurgeryProcedureRequestForm extends SimpleRequestForm
+{
+
+    public static final String NAME = "SurgeryProcedureRequest";
+
+    public SurgeryProcedureRequestForm(DataEntryFormContext ctx, Module owner) {
+        super(ctx, owner, NAME, "Request Surgery/Procedure", WNPRCConstants.DataEntrySections.PATHOLOGY_CLINPATH, Arrays.<FormSection>asList(
+                new RequestFormSection(),
+                new SurgeryProcedureRequestSection(),
+                //new SimpleFormPanelSection("wnprc", "surgeries", "Surgery Request"),
+                new AnimalDetailsPanel()
+        ));
+
+        for(FormSection section: this.getFormSections()) {
+            section.addConfigSource("SurgeryProcedureRequest");
+        }
+
+        this.addClientDependency(ClientDependency.fromPath("wnprc_ehr/model/sources/SurgeryProcedureRequest.js"));
+    }
+
+    @Override
+    protected List<String> getButtonConfigs() {
+        List<String> buttons = new ArrayList<>();
+        buttons.addAll(super.getButtonConfigs());
+
+        buttons.remove("REQUEST");
+        buttons.add("WNPRC_REQUEST");
+
+        return buttons;
+    }
+}
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/encryption/AES.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/encryption/AES.java
new file mode 100644
index 00000000..758ca891
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/encryption/AES.java
@@ -0,0 +1,94 @@
+package org.labkey.wnprc_ehr.encryption;
+
+import javax.crypto.Cipher;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+import java.nio.ByteBuffer;
+import java.nio.CharBuffer;
+import java.nio.charset.StandardCharsets;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+import java.util.Arrays;
+
+public class AES
+{
+    public static byte[] decrypt(String[] bytes) {
+        return decrypt(stringArrayToBytes(bytes));
+    }
+
+    public static byte[] decrypt(byte[] password) {
+        int enc_len = password.length;
+        byte[] decrypted = new byte[enc_len];
+        try
+        {
+            byte[] keyBytes = Files.readAllBytes(Paths.get(System.getProperty("key.file")));
+            byte[] ivBytes = Files.readAllBytes(Paths.get(System.getProperty("iv.file")));
+
+            SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");
+            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
+            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
+
+            cipher.init(Cipher.DECRYPT_MODE, key, ivSpec);
+            int dec_len = cipher.update(password, 0, enc_len, decrypted, 0);
+            dec_len += cipher.doFinal(decrypted, dec_len);
+        } catch (Exception e) {
+            //TODO add error handling
+        }
+        return decrypted;
+    }
+
+    public static byte[] encrypt(char[] password) {
+        return encrypt(charsToBytes(password));
+    }
+
+    public static byte[] encrypt(String password) {
+        return encrypt(password.getBytes(StandardCharsets.UTF_8));
+    }
+
+    public static byte[] encrypt(byte[] password) {
+        byte[] encrypted = new byte[password.length];
+        try {
+            byte[] keyBytes = Files.readAllBytes(Paths.get(System.getProperty("key.file")));
+            byte[] ivBytes = Files.readAllBytes(Paths.get(System.getProperty("iv.file")));
+
+            SecretKeySpec key = new SecretKeySpec(keyBytes, "AES");
+            IvParameterSpec ivSpec = new IvParameterSpec(ivBytes);
+            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
+
+            cipher.init(Cipher.ENCRYPT_MODE, key, ivSpec);
+            encrypted = new byte[cipher.getOutputSize(password.length)];
+            int enc_len = cipher.update(password, 0, password.length, encrypted, 0);
+            enc_len += cipher.doFinal(encrypted, enc_len);
+        } catch (Exception e) {
+            //TODO add error handling
+        }
+        return encrypted;
+    }
+
+    private static byte[] charsToBytes(char[] chars) {
+        CharBuffer charBuffer = CharBuffer.wrap(chars);
+        ByteBuffer byteBuffer = StandardCharsets.UTF_8.encode(charBuffer);
+        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());
+        Arrays.fill(charBuffer.array(), '\u0000'); // clear sensitive data
+        Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data
+        return bytes;
+    }
+
+    private static char[] bytesToChars(byte[] bytes){
+        ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);
+        CharBuffer charBuffer = StandardCharsets.UTF_8.decode(byteBuffer);
+        char[] chars = Arrays.copyOfRange(charBuffer.array(), charBuffer.position(), charBuffer.limit());
+        Arrays.fill(charBuffer.array(), '\u0000'); // clear sensitive data
+        Arrays.fill(byteBuffer.array(), (byte) 0); // clear sensitive data
+        return chars;
+    }
+
+    private static byte[] stringArrayToBytes(String[] bytes) {
+        int enc_len = bytes.length;
+        byte[] pw = new byte[enc_len];
+        for(int i = 0; i < bytes.length; i++) {
+            pw[i] = Byte.parseByte(bytes[i]);
+        }
+        return pw;
+    }
+}
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/pages/dataentry/SurgeryProcedureSchedule.jsp b/WNPRC_EHR/src/org/labkey/wnprc_ehr/pages/dataentry/SurgeryProcedureSchedule.jsp
new file mode 100644
index 00000000..557e33d1
--- /dev/null
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/pages/dataentry/SurgeryProcedureSchedule.jsp
@@ -0,0 +1,736 @@
+<%@ page import="org.labkey.wnprc_ehr.calendar.GoogleCalendar" %>
+<%@ page import="org.labkey.dbutils.api.SimpleQueryFactory" %>
+<%@ page import="org.labkey.dbutils.api.SimpleQuery" %>
+<%@ page import="org.labkey.webutils.api.json.JsonUtils" %>
+<%@ page import="org.json.JSONObject" %>
+<%@ page import="java.util.List" %>
+<%@ page import="org.labkey.wnprc_ehr.calendar.Office365Calendar" %>
+<%@ page import="org.json.JSONArray" %>
+<%@ page import="java.util.UUID" %>
+<%@ page import="java.util.ArrayList" %>
+<%@ page import="java.util.Comparator" %>
+<%@ page import="java.text.SimpleDateFormat" %>
+<%@ page import="java.text.ParseException" %>
+<%@ page import="org.labkey.api.view.ActionURL" %>
+<%@ page import="org.labkey.wnprc_ehr.WNPRC_EHRController" %>
+<%@ page import="org.labkey.api.security.Group" %>
+<%@ page import="org.labkey.api.security.GroupManager" %>
+<%@ page import="org.labkey.security.xml.GroupEnumType" %>
+<%@ page extends="org.labkey.api.jsp.JspBase" %>
+
+<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.min.css' />
+<script src='https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/3.9.0/fullcalendar.min.js'></script>
+
+<style type="text/css">
+    /* Full Calendar heading */
+    #calendar .fc-toolbar h1 {
+        font-size: 20px;
+        margin: 0;
+    }
+</style>
+
+
+<%
+    SimpleQueryFactory queryFactory = new SimpleQueryFactory(getUser(), getContainer());
+    SimpleQuery requests = queryFactory.makeQuery("study", "SurgeryProcedureRequests", "pending");
+    System.out.println("Requests: " + requests);
+    JSONArray jsonRequests = requests.getResults().getJSONArray("rows");
+    ArrayList<Integer> positionsToRemove = new ArrayList<>();
+    System.out.println("JSON Requests: " + jsonRequests);
+
+    for(int i = 0; i < jsonRequests.length(); i++)
+    {
+        JSONObject row1 = jsonRequests.getJSONObject(i);
+        for (int j = i + 1; j < jsonRequests.length(); j++)
+        {
+            JSONObject row2 = jsonRequests.getJSONObject(j);
+            UUID row1id = UUID.fromString(row1.getString("requestid"));
+            UUID row2id = UUID.fromString(row2.getString("requestid"));
+            if (row1id.equals(row2id))
+            {
+                positionsToRemove.add(j);
+                row1.put("animalid", row1.get("animalid") + "," + row2.get("animalid"));
+            }
+        }
+    }
+
+    List<JSONObject> statRequests = new ArrayList<>();
+    List<JSONObject> asapRequests = new ArrayList<>();
+    List<JSONObject> routineRequests = new ArrayList<>();
+
+    //Remove linked requests and separate by request priority
+    for(int i = 0; i < jsonRequests.length(); i++) {
+        if (!positionsToRemove.contains(i)) {
+            String priority = (jsonRequests.getJSONObject(i)).getString("priority");
+            switch (priority) {
+                case "Stat": statRequests.add(jsonRequests.getJSONObject(i));
+                    break;
+                case "ASAP": asapRequests.add(jsonRequests.getJSONObject(i));
+                    break;
+                case "Routine": routineRequests.add(jsonRequests.getJSONObject(i));
+                    break;
+            }
+        }
+    }
+
+    SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
+
+    Comparator<JSONObject> dateComparator = new Comparator<JSONObject>() {
+        @Override
+        public int compare(JSONObject o1, JSONObject o2) {
+            int result = 0;
+            try {
+                result = formatter.parse(o1.getString("date")).compareTo(formatter.parse(o2.getString("date")));
+            } catch (ParseException pe) {
+                System.out.println("ERROR: " + pe.getStackTrace());
+                //Silently fail.... (not a big deal, they just won't be sorted)
+            }
+            return result;
+        }
+    };
+
+    statRequests.sort(dateComparator);
+    asapRequests.sort(dateComparator);
+    routineRequests.sort(dateComparator);
+
+    //Add all requests back into one list that's now ordered by priority followed by start time
+    JSONArray pendingRequests = new JSONArray();
+    for(JSONObject statRequest : statRequests) {
+        pendingRequests.put(statRequest);
+    }
+    for(JSONObject asapRequest : asapRequests) {
+        pendingRequests.put(asapRequest);
+    }
+    for(JSONObject routineRequest : routineRequests) {
+        pendingRequests.put(routineRequest);
+    }
+
+    List<JSONObject> surgeryRooms = JsonUtils.getListFromJSONArray(queryFactory.selectRows("wnprc", "surgery_procedure_rooms"));
+
+    Group vetGroup = GroupManager.getGroup(getContainer(), "veterinarians (LDAP)", GroupEnumType.SITE);
+    Group spiGroup = GroupManager.getGroup(getContainer(), "spi (LDAP)", GroupEnumType.SITE);
+    boolean isVet = getUser().isInGroup(vetGroup.getUserId()) || getUser().isInSiteAdminGroup();
+    boolean isSpi = getUser().isInGroup(spiGroup.getUserId()) || getUser().isInSiteAdminGroup();
+
+    GoogleCalendar ct = new GoogleCalendar();
+    ct.setUser(getUser());
+    ct.setContainer(getContainer());
+    String gCalEventsString = "[]";
+    if (isVet) {
+        gCalEventsString = ct.getCalendarEventsAsJson();
+    }
+
+    Office365Calendar oct = new Office365Calendar();
+    oct.setUser(getUser());
+    oct.setContainer(getContainer());
+    String outlookScheduledEventsString = oct.getCalendarEventsAsJson(false);
+
+    String outlookHeldEventsString = "[]";
+    if (isVet || isSpi) {
+        outlookHeldEventsString = oct.getCalendarEventsAsJson(true);
+    }
+%>
+
+<div class="col-xs-12 col-xl-10">
+    <div class="col-xs-12 col-md-4">
+        <div class="panel panel-primary">
+            <div class="panel-heading"><span>Surgery Details</span></div>
+            <div class="panel-body" data-bind="with: taskDetails">
+                <%--<!-- ko ifnot: taskid() != '' -->--%>
+                <p><em>Please click on a Surgery in the Calendar to view details for that Surgery.</em></p>
+                <%--<!-- /ko -->--%>
+                <%--<!-- ko if: taskid() != '' -->--%>
+                <dl class="dl-horizontal">
+                    <dt>Task ID:            </dt> <dd>{{taskid}}</dd>
+                    <dt>Procedure:          </dt> <dd>{{procedure}}</dd>
+                    <dt>Animal ID:          </dt> <dd><a href="{{animalLink}}">{{animalid}}</a></dd>
+                    <dt>Sex:                </dt> <dd>{{sex}}</dd>
+                    <dt>Age:                </dt> <dd>{{age}}</dd>
+                    <dt>Weight:             </dt> <dd>{{weight}}</dd>
+                    <dt>Medical:            </dt> <dd>{{medical}}</dd>
+                    <dt>Project (Account):  </dt> <dd>{{project}} ({{account}})</dd>
+                    <dt>Protocol:           </dt> <dd>{{protocol}}</dd>
+                    <dt>Surgery Start:      </dt> <dd>{{date}}</dd>
+                    <dt>Surgery End:        </dt> <dd>{{enddate}}</dd>
+                    <dt>Surgery Location:   </dt> <dd>{{location}}</dd>
+                    <dt>Comments:           </dt> <dd>{{comments}}</dd>
+
+                    <%--<!-- ko if: !_.isBlank(cur_room()) && !_.isBlank(cur_cage()) -->--%>
+                    <dt>Current Room:       </dt> <dd>{{cur_room}}</dd>
+                    <dt>Current Cage:       </dt> <dd>{{cur_cage}}</dd>
+                    <dt>Housing Type:       </dt> <dd>{{cur_cond}}</dd>
+                    <%--<!-- /ko -->--%>
+
+                </dl>
+                <%--<!-- /ko -->--%>
+                <%--<!-- ko if: hold() -->--%>
+                    <div style="text-align: right;">
+                        <button class="btn btn-danger" data-bind="click: $root.cancelHeldEvent">Cancel</button>
+                    </div>
+                <%--<a class="btn btn-default" href="{{$parent.cancelHeldEvent}}"         data-bind="css: { disabled: _.isBlank(taskid()) }">Cancel</a>--%>
+                <%--<!-- /ko -->--%>
+                <%--<a class="btn btn-default" href="{{$parent.viewNecropsyReportURL}}" data-bind="css: { disabled: _.isBlank(taskid()) }">Report</a>--%>
+                <%--<a class="btn btn-default" href="{{$parent.viewNecropsyURL}}"       data-bind="css: { disabled: _.isBlank(taskid()) }">View Record</a>--%>
+                <%--<a class="btn btn-primary" href="{{$parent.editNecropsyURL}}"       data-bind="css: { disabled: _.isBlank(taskid()) }">Edit Record</a>--%>
+            </div>
+        </div>
+    </div>
+
+    <div class="col-xs-12 col-md-8">
+        <div class="panel panel-primary">
+            <div class="panel-heading"><span>Calendar</span></div>
+            <div class="panel-body">
+                <div id="calendar"></div>
+            </div>
+        </div>
+    </div>
+</div>
+
+<div class="col-xs-12 col-xl-10">
+    <div class="col-xs-12 col-md-8">
+        <div class="panel panel-primary">
+            <div class="panel-heading"><span>Pending Requests</span></div>
+            <div class="panel-body">
+                <p>
+                    Requests are color-coded based on priority.  <span class="bg-danger">Stat</span> requests are
+                    highlighted in <span class="bg-danger">red</span> and <span class="bg-warning">ASAP</span> requests
+                    are highlighted in <span class="bg-warning">yellow</span>.
+                </p>
+                <!-- ko if: pendingRequestTable.rows().length == 0 -->
+                <p><em>There are no pending Surgery requests.</em></p>
+                <!-- /ko -->
+            </div>
+
+            <!-- ko if: pendingRequestTable.rows().length > 0 -->
+            <lk-table params="table: pendingRequestTable, rowClickCallback: requestTableClickAction"></lk-table>
+            <!-- /ko -->
+        </div>
+    </div>
+
+    <div class="col-xs-12 col-md-4">
+        <div class="panel panel-primary">
+            <div class="panel-heading"><span>Schedule Request</span></div>
+            <div class="panel-body" id="scheduleRequestForm" data-bind="with: form">
+                <!-- ko if: requestid() == '' -->
+                <p style="text-align: center">
+                    <em>Please click on a pending request to schedule it.</em>
+                </p>
+                <!-- /ko -->
+
+                <form class="form-horizontal scheduleForm">
+                    <!-- ko if: requestid() != '' -->
+                    <div class="form-group">
+                        <label class="col-xs-4 control-label">Request ID</label>
+                        <div class="col-xs-8">
+                            <p class="form-control-static">
+                                <a href="{{href}}">
+                                    {{ requestid | lookup:$root.RequestIdLookup }}
+                                </a>
+                                <span> ({{ requestid | lookup:$root.PriorityLookup }})</span>
+                            </p>
+                        </div>
+                    </div>
+
+                    <div class="form-group">
+                        <label class="col-xs-4 control-label">Animal ID(s)</label>
+                        <div class="col-xs-8">
+                            <p class="form-control-static">{{animalid}}</p>
+                        </div>
+                    </div>
+
+                    <div class="form-group">
+                        <label class="col-xs-4 control-label">Comments</label>
+                        <div class="col-xs-8">
+                            <p class="form-control-static">{{comments}}</p>
+                        </div>
+                    </div>
+                    <!-- /ko -->
+
+                    <div class="form-group">
+                        <label class="col-xs-4 control-label">Date</label>
+                        <div class="col-xs-8">
+                            <div class='input-group date' id='datetimepicker1'>
+                                <input type='text' class="form-control" data-bind="dateTimePicker: date"/>
+                                <span class="input-group-addon">
+                                    <span class="glyphicon glyphicon-calendar"></span>
+                                </span>
+                            </div>
+                        </div>
+                    </div>
+
+                    <div class="form-group">
+                        <label class="col-xs-4 control-label">Location</label>
+                        <div class="col-xs-8">
+                            <select data-bind="value: location" class="form-control">
+                                <option value=""></option>
+                                <%
+                                    for(JSONObject surgeryRoom : surgeryRooms) {
+                                        String roomName = surgeryRoom.getString("room");
+                                %>
+                                <option value="<%=roomName%>"><%=h(roomName)%></option>
+                                <%
+                                    }
+                                %>
+                            </select>
+                        </div>
+                    </div>
+
+                    <%--<div class="form-group">--%>
+                        <%--<label class="col-xs-4 control-label">Pathologist</label>--%>
+                        <%--<div class="col-xs-8">--%>
+                            <%--&lt;%&ndash;<select data-bind="value: pathologist" class="form-control">&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;<option value=""></option>&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;&lt;%&ndash;%>--%>
+                                    <%--&lt;%&ndash;for(JSONObject pathologist : pathologistList) {&ndash;%&gt;--%>
+                                        <%--&lt;%&ndash;String userid = pathologist.getString("userid");&ndash;%&gt;--%>
+                                        <%--&lt;%&ndash;String internaluserid = pathologist.getString("internaluserid");&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;%>&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;<option value="<%=internaluserid%>"><%=h(userid)%></option>&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;&lt;%&ndash;%>--%>
+                                    <%--&lt;%&ndash;}&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;%>&ndash;%&gt;--%>
+                            <%--&lt;%&ndash;</select>&ndash;%&gt;--%>
+                        <%--</div>--%>
+                    <%--</div>--%>
+
+                    <%--<div class="form-group">--%>
+                        <%--<label class="col-xs-4 control-label">Prosector</label>--%>
+                        <%--<div class="col-xs-8">--%>
+                            <%--&lt;%&ndash;<select data-bind="value: assistant" class="form-control">&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;<option value=""></option>&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;&lt;%&ndash;%>--%>
+                                    <%--&lt;%&ndash;for(JSONObject pathologist : pathologistList) {&ndash;%&gt;--%>
+                                        <%--&lt;%&ndash;String userid = pathologist.getString("userid");&ndash;%&gt;--%>
+                                        <%--&lt;%&ndash;String internaluserid = pathologist.getString("internaluserid");&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;%>&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;<option value="<%=internaluserid%>"><%=h(userid)%></option>&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;&lt;%&ndash;%>--%>
+                                    <%--&lt;%&ndash;}&ndash;%&gt;--%>
+                                <%--&lt;%&ndash;%>&ndash;%&gt;--%>
+                            <%--&lt;%&ndash;</select>&ndash;%&gt;--%>
+                        <%--</div>--%>
+                    <%--</div>--%>
+
+                    <div class="form-group">
+                        <label class="col-xs-4 control-label">Hold/Deny Reason</label>
+                        <div class="col-xs-8">
+                            <div class='input-group' id='holddenyreason'>
+                                <input type='text' class="form-control" data-bind="value: statuschangereason">
+                            </div>
+                        </div>
+
+
+                        <%--<div class="col-xs-8">--%>
+                            <%--<p class="form-control">{{statuschangereason}}</p>--%>
+                            <%--&lt;%&ndash;<input type="hidden" class="hidden-assignedTo-field" data-bind="value: assignedTo">&ndash;%&gt;--%>
+                            <%--&lt;%&ndash;<input type="text" class="form-control assignedTo-field">&ndash;%&gt;--%>
+                        <%--</div>--%>
+                    </div>
+
+                    <div style="text-align: right;">
+                        <button class="btn btn-default" data-bind="click: $root.clearForm">Cancel</button>
+                        <button class="btn btn-danger" data-bind="click: $root.denyForm">Deny</button>
+                        <button class="btn btn-warning" data-bind="click: $root.holdForm">Hold</button>
+                        <button class="btn btn-success" data-bind="click: $root.submitForm">Schedule</button>
+                    </div>
+                </form>
+
+            </div>
+        </div>
+    </div>
+</div>
+
+<script>
+    //debugger
+    (function() {
+        var $calendar = $('#calendar');
+        $(document).ready(function() {
+            $calendar.fullCalendar({
+                header: {
+                    left: 'prev,next today',
+                    center: 'title',
+                    right: 'month,agendaWeek,agendaDay'
+                },
+
+                eventSources: [
+                    {
+                        events: <%=gCalEventsString%>,
+                        color: 'lightblue',
+                        eventTextColor: 'white',
+                        className: 'testClass'
+                    },
+                    {
+                        events: <%=outlookScheduledEventsString%>,
+                        color: 'lightgreen',
+                        eventTextColor: 'black',
+                        className: 'testClass'
+                    },
+                    {
+                        events: <%=outlookHeldEventsString%>,
+                        color: 'orange',
+                        eventTextColor: 'black',
+                        className: 'testClass'
+                    },
+                    {
+                        events: [
+                            {
+                                title: 'Test123 this is a really long string to see what happens!',
+                                start: '2018-03-22',
+                                end:   '2018-03-23'
+                            }
+                        ],
+                        color: 'yellow',
+                        eventTextColor: 'red'
+                    }
+                ],
+                eventClick: function(calEvent, jsEvent, view) {
+                    jQuery.each(calEvent.rawRowData, function(key, value) {
+                        if (key in WebUtils.VM.taskDetails) {
+                            if (key == "date" || key == "enddate") { //TODO modified???
+                                value = displayDate(value);
+                            }
+                            WebUtils.VM.taskDetails[key](value);
+                        }
+                    });
+                }
+            })
+        });
+
+        //debugger
+
+        // Build a lookup index of requests.
+        var pendingRequestsIndex = {};
+
+        var pendingRequests = <%= pendingRequests %>;
+        jQuery.each(pendingRequests, function(i, request) {
+            pendingRequestsIndex[request.requestid] = request;
+        });
+
+        var displayDate = function(dateString) {
+            return moment(dateString, "YYYY/MM/DD HH:mm:ss").format('MMM D[,] YYYY');
+        };
+
+        var displayDateTime = function(dateString) {
+            return moment(dateString, "YYYY/MM/DD HH:mm:ss").format('MMM D[,] YYYY [at] h:mm a');
+        };
+
+        var $scheduleForm = $('.scheduleForm');
+
+        _.extend(WebUtils.VM, {
+            disableForm: function() {
+                $scheduleForm.find(":input").attr("disabled", true);
+            },
+            enableForm: function() {
+                $scheduleForm.find(":input").attr("disabled", false);
+            },
+            taskDetails: {
+                lsid:                 ko.observable(),
+                objectid:             ko.observable(),
+                requestid:            ko.observable(),
+                taskid:               ko.observable(''),
+                procedure:            ko.observable(),
+                age:                  ko.observable(),
+                animalid:             ko.observable(),
+                account:              ko.observable(),
+                cur_room:             ko.observable(),
+                cur_cage:             ko.observable(),
+                cur_cond:             ko.observable(),
+                location:             ko.observable(), // Surgery location
+                medical:              ko.observable(),
+                project:              ko.observable(),
+                protocol:             ko.observable(),
+                sex:                  ko.observable(),
+                weight:               ko.observable(),
+                date:                 ko.observable(),
+                enddate:              ko.observable(),
+                comments:             ko.observable(),
+                hold:                 ko.observable()
+            },
+            form: ko.mapping.fromJS({
+                lsid:               '',
+                objectid:           '',
+                requestid:          '',
+                animalid:           '',
+                location:           '',
+                priority:           '',
+                date:               '',
+                enddate:            '',
+                location:           '',
+                procedure:          '',
+                comments:           '',
+                statuschangereason: ''
+            }),
+            PriorityLookup: new WebUtils.utils.Lookup({
+                schemaName: 'ehr',
+                queryName:  'requests',
+                columns:    ['requestid', 'priority'],
+                keyColumn:  'requestid',
+                valueAccessor: function(obj) {
+                    return obj.priority;
+                }
+            }),
+            RequestIdLookup: new WebUtils.utils.Lookup({
+                schemaName: 'ehr',
+                queryName:  'requests',
+                columns:    ['requestid', 'rowid'],
+                keyColumn:  'requestid',
+                valueAccessor: function(obj) {
+                    return obj.rowid;
+                }
+            }),
+            pendingRequestTable: new WebUtils.Models.Table({
+                rowHeaders: ["Request ID", "Priority", "Animal ID(s)", "Requested By", "Requested On", "Requested Start", "Requested End"],
+                rows: pendingRequests.map(function(row) {
+                    return new WebUtils.Models.TableRow({
+                        data: [
+                            row.rowid,
+                            row.priority,
+                            row.animalid,
+                            row.requestor,
+                            displayDate(row.created),
+                            displayDateTime(row.date),
+                            displayDateTime(row.enddate)
+                        ],
+                        otherData: row,
+                        warn: (row.priority == 'ASAP'),
+                        err:  (row.priority == 'Stat'),
+                        success: (row.priority == 'Routine')
+                    });
+                })
+            }),
+            requestTableClickAction: function(row) {
+                WebUtils.VM.requestRowInForm = row;
+                WebUtils.VM.updateForm(row.otherData.requestid);
+            }
+        });
+
+        WebUtils.VM.taskDetails.animalLink = ko.pureComputed(function() {
+            var animalId = WebUtils.VM.taskDetails.animalid();
+
+            return LABKEY.ActionURL.buildURL('ehr', 'participantView', null, {
+                participantId: animalId
+            });
+        });
+
+        WebUtils.VM.form.href = ko.computed(function() {
+            var requestid = WebUtils.VM.form.requestid();
+
+            if (requestid == '') {
+                return '#';
+            }
+
+            return LABKEY.ActionURL.buildURL('ehr', 'dataEntryFormDetails', null, {
+                formType: 'SurgeryProcedureRequest',
+                returnURL: window.location,
+                requestId: requestid
+            });
+        });
+
+        _.extend(WebUtils.VM, {
+            clearForm: function() {
+                jQuery.each(WebUtils.VM.form, function(key, observable) {
+                    if (ko.isObservable(observable) && !ko.isComputed(observable)) {
+                        observable('');
+                    }
+                });
+            },
+            updateForm: function(requestid) {
+                var request = pendingRequestsIndex[requestid];
+
+                if (!_.isObject(request)) {
+                    return;
+                }
+
+                jQuery.each(request, function(key, value) {
+                    if (key in WebUtils.VM.form) {
+                        if (key == "date" || key == "enddate") { //TODO modified???
+                            value = new Date(value);
+                        }
+                        WebUtils.VM.form[key](value);
+                    }
+                });
+            },
+            holdForm: function() {
+                $('#scheduleRequestForm').block({
+                    message: '<img src="<%=getContextPath()%>/webutils/icons/loading.svg">Scheduling...',
+                    css: {
+                        border: 'none',
+                        padding: '15px',
+                        backgroundColor: '#000',
+                        '-webkit-border-radius': '10px',
+                        '-moz-border-radius': '10px',
+                        opacity: .5,
+                        color: '#fff'
+                    }
+                });
+
+                var form = ko.mapping.toJS(WebUtils.VM.form);
+
+                // Call the WNPRC_EHRController->ScheduleSurgeryProcedureAction method to
+                // update the study.surgery_procedure, ehr.request, and ehr.task tables
+                LABKEY.Ajax.request({
+                    url: LABKEY.ActionURL.buildURL("wnprc_ehr", "ScheduleSurgeryProcedure", null, {
+                        requestId: form.requestid,
+                        start: form.date,
+                        end: form.enddate,
+                        room: form.location,
+                        subject: form.animalid + ' ' + form.procedure,
+                        categories: 'Surgeries',
+                        assignedTo: form.assignedto,
+                        hold: true
+                    }),
+                    success: LABKEY.Utils.getCallbackWrapper(function (response)
+                    {
+                        if (response.success) {
+                            WebUtils.VM.pendingRequestTable.rows.remove(WebUtils.VM.requestRowInForm);
+                            location.reload(true);
+                        } else {
+                            alert('There is already a surgery or procedure scheduled in room ' + form.location + ' during the selected time.');
+                        }
+                        // Clear the form
+                        WebUtils.VM.clearForm();
+                        $('#scheduleRequestForm').unblock();
+                    }, this),
+                    failure: LABKEY.Utils.getCallbackWrapper(function (response)
+                    {
+                        $('#scheduleRequestForm').unblock();
+                    }, this)
+                });
+            },
+            denyForm: function() {
+                $('#scheduleRequestForm').block({
+                    message: '<img src="<%=getContextPath()%>/webutils/icons/loading.svg">Scheduling...',
+                    css: {
+                        border: 'none',
+                        padding: '15px',
+                        backgroundColor: '#000',
+                        '-webkit-border-radius': '10px',
+                        '-moz-border-radius': '10px',
+                        opacity: .5,
+                        color: '#fff'
+                    }
+                });
+
+                var form = ko.mapping.toJS(WebUtils.VM.form);
+
+                LABKEY.Ajax.request({
+                    url: LABKEY.ActionURL.buildURL("wnprc_ehr", "SurgeryProcedureChangeStatus", null, {
+                        requestId: form.requestid,
+                        QCState: '7',
+                        statusChangeReason: form.statuschangereason
+                    }),
+                    success: LABKEY.Utils.getCallbackWrapper(function (response)
+                    {
+                        if (response.success) {
+                            WebUtils.VM.pendingRequestTable.rows.remove(WebUtils.VM.requestRowInForm);
+                            location.reload(true);
+                        } else {
+                            alert('There was an error denying the request.');
+                        }
+                        // Clear the form
+                        WebUtils.VM.clearForm();
+                        $('#scheduleRequestForm').unblock();
+                    }, this),
+                    failure: LABKEY.Utils.getCallbackWrapper(function (response)
+                    {
+                        $('#scheduleRequestForm').unblock();
+                    }, this)
+                });
+            },
+            cancelHeldEvent: function() {
+                LABKEY.Ajax.request({
+                    url: LABKEY.ActionURL.buildURL("wnprc_ehr", "SurgeryProcedureChangeStatus", null, {
+                        requestId: WebUtils.VM.taskDetails.requestid(),
+                        QCState: '5'
+                    }),
+                    success: LABKEY.Utils.getCallbackWrapper(function (response)
+                    {
+                        if (response.success) {
+                            WebUtils.VM.pendingRequestTable.rows.remove(WebUtils.VM.requestRowInForm);
+                            location.reload(true);
+                        } else {
+                            alert('There was an error while trying to cancel the event.');
+                        }
+                    }, this)
+                });
+            },
+            viewNecropsyReportURL: ko.pureComputed(function() {
+                <% ActionURL necropsyReportURL = new ActionURL(WNPRC_EHRController.NecropsyReportAction.class, getContainer()); %>
+
+                return LABKEY.ActionURL.buildURL('<%= necropsyReportURL.getController() %>', '<%= necropsyReportURL.getAction() %>', null, {
+                    reportMode: true,
+                    taskid: WebUtils.VM.taskDetails.lsid()
+                });
+            }),
+            editNecropsyURL: ko.pureComputed(function() {
+                return LABKEY.ActionURL.buildURL('ehr', 'dataEntryForm', null, {
+                    formType: 'Necropsy',
+                    taskid: WebUtils.VM.taskDetails.lsid()
+                });
+            }),
+            viewNecropsyURL: ko.pureComputed(function() {
+                return LABKEY.ActionURL.buildURL('ehr', 'dataEntryFormDetails', null, {
+                    formType: 'Necropsy',
+                    taskid: WebUtils.VM.taskDetails.lsid()
+                });
+            }),
+            submitForm: function() {
+                $('#scheduleRequestForm').block({
+                    message: '<img src="<%=getContextPath()%>/webutils/icons/loading.svg">Scheduling...',
+                    css: {
+                        border: 'none',
+                        padding: '15px',
+                        backgroundColor: '#000',
+                        '-webkit-border-radius': '10px',
+                        '-moz-border-radius': '10px',
+                        opacity: .5,
+                        color: '#fff'
+                    }
+                });
+
+                var form = ko.mapping.toJS(WebUtils.VM.form);
+
+                // Call the WNPRC_EHRController->ScheduleSurgeryProcedureAction method to
+                // update the study.surgery_procedure, ehr.request, and ehr.task tables
+                LABKEY.Ajax.request({
+                    url: LABKEY.ActionURL.buildURL("wnprc_ehr", "ScheduleSurgeryProcedure", null, {
+                        requestId: form.requestid,
+                        start: form.date,
+                        end: form.enddate,
+                        room: form.location,
+                        subject: form.animalid + ' ' + form.procedure,
+                        categories: 'Surgeries',
+                        assignedTo: form.assignedto,
+                        hold: false
+                    }),
+                    success: LABKEY.Utils.getCallbackWrapper(function (response)
+                    {
+                        if (response.success) {
+                            WebUtils.VM.pendingRequestTable.rows.remove(WebUtils.VM.requestRowInForm);
+                            location.reload(true);
+                        } else {
+                            alert('There is already a surgery or procedure scheduled in room ' + form.location + ' during the selected time.');
+                        }
+                        // Clear the form
+                        WebUtils.VM.clearForm();
+                        $('#scheduleRequestForm').unblock();
+                    }, this),
+                    failure: LABKEY.Utils.getCallbackWrapper(function (response)
+                    {
+                        $('#scheduleRequestForm').unblock();
+                    }, this)
+                });
+            }
+        });
+
+        WebUtils.VM.disableForm();
+        WebUtils.VM.form.requestid.subscribe(function(val) {
+            if (val == '') {
+                WebUtils.VM.disableForm();
+            }
+            else {
+                WebUtils.VM.enableForm();
+            }
+        })
+    })();
+</script>
\ No newline at end of file
diff --git a/WNPRC_EHR/src/org/labkey/wnprc_ehr/schemas/WNPRC_Schema.java b/WNPRC_EHR/src/org/labkey/wnprc_ehr/schemas/WNPRC_Schema.java
index 07cb2a1f..c699871f 100644
--- a/WNPRC_EHR/src/org/labkey/wnprc_ehr/schemas/WNPRC_Schema.java
+++ b/WNPRC_EHR/src/org/labkey/wnprc_ehr/schemas/WNPRC_Schema.java
@@ -9,6 +9,7 @@ import org.labkey.api.cache.CacheManager;
 import org.labkey.api.data.Container;
 import org.labkey.api.data.ContainerManager;
 import org.labkey.api.data.DbSchema;
+import org.labkey.api.data.DbSchemaType;
 import org.labkey.api.data.SimpleFilter;
 import org.labkey.api.data.TableInfo;
 import org.labkey.api.ehr.security.EHRRequestPermission;
