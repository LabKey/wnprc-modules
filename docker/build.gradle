plugins {
    id 'com.bmuschko.docker-remote-api' version '9.3.1'
     id 'idea'
}


//import org.gradle.nativeplatform.platform
import org.gradle.internal.os.OperatingSystem

// Import task types
import com.bmuschko.gradle.docker.tasks.image.*


apply plugin: 'idea'

idea.module {
    excludeDirs += file("data")
    excludeDirs += file("logs")
}

def buildType=''
def branch = ''

//Registering credential to use the bmuschko plugin to use docker
docker {
    url = 'unix:///var/run/docker.sock'
    registryCredentials {
        url = 'https://index.docker.io/v1/'
        username = "${dockerhubUsername}"
        password = "${dockerhubPassword}"
    }
}

//Login into Docker without using plugin, done via a bash script that reads a token file using cat
//Source:https://docs.docker.com/engine/reference/commandline/login/
tasks.register('dockerLogin', Exec){
    commandLine "./dockerLogin.sh"
    args "--tokenPath", "${dockertokenpath}", "--username", "${dockerhubUsername}"
}
configure(dockerLogin){
    dependsOn 'checkDocker'
    group  'Docker'
    description 'Login into Docker Hub'
    onlyIf { project.hasProperty('dockerhubUsername') && project.hasProperty('dockertokenpath') }
}

tasks.register("processbranchName"){
    def dockerStr = providers.gradleProperty("branchName")
    
    
        if (dockerStr.present)
        {
             def branchName = dockerStr.get()
            if (branchName ==~ /^(?<year>[0-9]{2})\.(?<version>[0-9]{1,2})_fb_(?<fb>.*)/){
                def (_,year,version, fb) = (branchName =~ /^(?<year>[0-9]{2})\.(?<version>[0-9]{1,2})_fb_(?<fb>.*)/)[0]
                buildType = 'fb'

                project.ext.set('labkeyYear',year)
                println(project.labkeyYear)
                project.ext.set('labkeyMonth',version)
                println(project.labkeyMonth)
                project.ext.set('labkeyFB',fb)
                println(project.labkeyFB)
                branch=project.labkeyYear+project.labkeyMonth+'_'+project.labkeyFB;
            }
            else if (branchName ==~ /^release[0-9]{2}\.[0-9]{1,2}-SNAPSHOT/){
                def (_,year,version) = (branchName =~ /^release(?<year>[0-9]{2})\.(?<version>[0-9]{1,2})-SNAPSHOT/)[0]
                buildType = 'SNAPSHOT'
                project.ext.set('labkeyYear',year)
                println(project.labkeyYear)
                project.ext.set('labkeyMonth',version)
                println(project.labkeyMonth)
                branch=project.labkeyYear+'.'+project.labkeyMonth;

            }else{
                println "no match"
            }

        }else{
            println "'Must provide docker string via command line. (ex. ./gradlew processbranchName -PbranchName=22.11_fb)'"
        }

}

tasks.register("buildEhrCron", Exec) {
    workingDir "$projectDir/ehrcron"
    executable "docker"
    args "build", ".", "-t", "wnprcehr/ehrcron:latest"
}
configure(buildEhrCron){
    group = 'Docker'
    description = "Generates the ehrcron docker image"
}

tasks.register("buildEhrCronPlug", DockerBuildImage){
    inputDir.set(file("ehrcron/"))
    images.add("wnprcehr/ehrcron:latest")
    group 'DockerPlugin'
}

tasks.register("buildTomcat") { Task t ->
    doLast {
        if (!project.hasProperty("nocache")){
            ext.nocache = "false"
        }
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            //String branch = ""
            println buildType
            switch (buildType){
                case 'fb':
                    println 'Tomcat fb'
                    branch=project.labkeyYear+'.'+project.labkeyMonth+'_'+project.labkeyFB;
                    break;
                case 'SNAPSHOT':
                    println 'Tomcat SNAPSHOT'
                    branch=project.labkeyYear+'.'+project.labkeyMonth;
                    break;
                default:
                    branch=project.labkeyVersion;
                    break;
            }
            println nocache
            if (nocache.equals("true")){
                println "building image without cache"
                t.project.exec{
                    workingDir "$projectDir/tomcat"
                    executable "docker"
                    args "build", ".", "--no-cache", "-t", "wnprcehr/tomcat:tomcat9_"+branch
                }
            }else{
                t.project.exec{
                    workingDir "$projectDir/tomcat"
                    executable "docker"
                    args "build", ".", "-t", "wnprcehr/tomcat:tomcat9_"+branch
                }
            }
            
        }else {
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildTomcat -PbranchName=22.11_fb)'
        }
    }
    
}
configure(buildTomcat){
    group 'Docker'
    description 'Generates the Tomcat docker image (with R)'
    dependsOn  "checkDocker", "dockerLogin", "processbranchName"
    onlyIf {buildType != ''}
} 

tasks.register("buildTomcatPlug", DockerBuildImage){
    def dockerStr = providers.gradleProperty("branchName")
    if (dockerStr.present){
      //  String branch = ""
        println buildType
        switch (buildType){
            case 'fb':
                println 'Tomcat fb'
                branch=project.labkeyYear+project.labkeyMonth+'_'+project.labkeyFB;
                break;
            case 'SNAPSHOT':
                println 'Tomcat SNAPSHOT'
                branch=project.labkeyYear+'.'+project.labkeyMonth;
                break;
            default:
                branch=project.labkeyVersion;
                break;
        }
        inputDir.set(file("tomcat/"))
        images.add("wnprcehr/tomcat:tomcat9_${branch}")

    }else {
        logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildTomcatPlug -PbranchName=22.11_fb)'
    }    
}
configure(buildTomcatPlug){
    group 'DockerPlugin'
    description 'Generates the Tomcat docker image (with R)'
    dependsOn  "checkDocker", "dockerLogin", "processbranchName"
} 

//Building LabKey with hooks/build for consistancy with Docker Hub and used of environment variables duirng the build process
//Source: https://stackoverflow.com/questions/36322536/how-to-set-an-environment-variable-from-a-gradle-build / https://stackoverflow.com/a/63140816
tasks.register("buildLabkey") { Task t ->
//task("buildLabkey", group: "Docker", description: "Generates the LabKey docker image", dependsOn: ["buildTomcat", "buildEhrCron", "buildPostfix"]) { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("branchName")

        if (dockerStr.present){
            println dockerStr.get()
            //String branchName = dockerStr.get()
            String branchName = ''
            if (buildType == 'fb'){
                 branchName = project.labkeyYear+'.'+project.labkeyMonth+'_'+project.labkeyFB
                 println branchName
            }
            else if (buildType == 'SNAPSHOT'){
                //Matching the string used by Teamcity (^([0-9]{2}\.[0-9]{1,2})_refs_heads_release([0-9]{2}\.[0-9]{1,2})-SNAPSHOT)
                //In order for gradle and Docker Hub to work in a similar fashion
                branchName = project.labkeyYear+'.'+project.labkeyMonth+'_refs_heads_release'+project.labkeyYear+'.'+project.labkeyMonth+'-SNAPSHOT'
                println branchName
            }
            else {

            }
            
            println branchName
            if (project.hasProperty('labkeyTeamcityUsername') && project.hasProperty('labkeyTeamcityPassword')) {
                t.project.exec {
                    workingDir "$projectDir/labkey/hooks"
                    commandLine "./build"
                    environment += ['teamcityUser':"${labkeyTeamcityUsername}",'teamCityPWD':"${labkeyTeamcityPassword}",'DOCKER_TAG':"${branchName}"]
                }
            } else {
                logger.warn 'To build the LabKey image from TeamCity, you must specify a username and password in your ~/.gradle/gradle.properties file.'
            }
        } else {
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildLabkey -PbranchName=22.11_fb_???)'
        }
    }    
}
configure(buildLabkey){
    dependsOn 'processbranchName'
    group 'Docker'
    description 'Generates the LabKey docker image'

}

 tasks.register("buildPostfix") { Task t ->
    doLast{
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present){
            //String branch = ""
                println 'build type '+buildType
                switch (buildType){
                    case 'fb':
                        println 'Tomcat fb'
                        branch=project.labkeyYear+project.labkeyMonth+'_'+project.labkeyFB;
                        break;
                    case 'SNAPSHOT':
                        println 'Tomcat SNAPSHOT'
                        branch=project.labkeyYear+'.'+project.labkeyMonth;
                        break;
                    default:
                        branch=project.labkeyVersion;
                        break;
                }
            t.project.exec {
                workingDir "$projectDir/postfix"
                executable "docker"
                args "build", ".", "-t", "wnprcehr/postfix:"+branch
            }
        }
    }
}
configure(buildPostfix){
    dependsOn 'processbranchName'
    group 'Docker'
    description 'Generates the postfix docker image'

} 

tasks.register("buildPostfixPlug", DockerBuildImage){
     inputDir.set(file("postfix/"))
    doLast{
        println 'postfix branch ' + branch + ' '+ buildType
        images.add("wnprcehr/postfix:"+branch)   
    }
    
}
configure(buildPostfixPlug){
    dependsOn 'processbranchName'
    group 'DockerPlugin'
    description 'Generates the postfix docker image'

} 
/* tasks.register("tagPostfixPlug", DockerTagImage){
    //dependsOn buildPostfixPlug
    repository="wnprcehr/postfix"
    println 'postfix branch '+ branch
    tag = branch
    targetImageId buildPostfixPlug.getImageId()         
    
    //String branch = ""
    doFirst{
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present){
            
                println buildType
                switch (buildType){
                    case 'fb':
                        println 'Tomcat fb'
                        branch=project.labkeyYear+project.labkeyMonth+'_'+project.labkeyFB;
                        break;
                    case 'SNAPSHOT':
                        println 'Tomcat SNAPSHOT'
                        branch=project.labkeyYear+'.'+project.labkeyMonth;
                        break;
                    default:
                        branch=project.labkeyVersion;
                        break;
                }

        }
    }
    doLast{
    
    }

}
configure(tagPostfixPlug){
   
} */

tasks.register("buildAll"){
    group 'Docker'
    description 'Generates all the docker images in the subfolders'
    dependsOn "buildTomcat", "buildEhrcron", "buildLabkey", "buildPostfix" 

}

//Two tasks to download LabKey from docker hub, first one does not use plugin
tasks.register("downloadLabkey") { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String branchName = dockerStr.get()
            t.project.exec {
                workingDir "$projectDir/labkey/"
                executable "docker"
                args "pull", "wnprcehr/labkeysnapshot:"+project.labkeyYear+'.'+project.labkeyMonth
            }
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadLabkey -PbranchName=22.11_fb)'
        }
    }
    group 'Docker' 
    description 'Download Docker Images from Docker Hub'
    dependsOn "checkDocker", "dockerLogin", "processbranchName"
}
tasks.register("downloadLabkeyPlug", DockerPullImage){
    image = "wnprcehr/labkeysnapshot:${branchName}"
    
    onComplete{
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            println 'downloading image' 
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew dockerPullLabkey -PbranchName=22.11_fb)'
        }
    }
    doLast{
        println "image pulled"     
    }
    group 'DockerPlugin'
    dependsOn 'checkDocker'
}

tasks.register("downloadEhrcron") { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            switch (buildType){
                case 'fb':
                    println 'Tomcat fb'
                    branch=project.labkeyYear+'.'+project.labkeyMonth+'_'+project.labkeyFB;
                    break;
                case 'SNAPSHOT':
                    println 'Tomcat SNAPSHOT'
                    branch=project.labkeyYear+'.'+project.labkeyMonth;
                    break;
                default:
                    branch=project.labkeyVersion;
                    break;
            }
            if (project.prod){
                t.project.exec {
                    executable "docker"
                    args "pull", "wnprcehr/ehrcronprod:"+branch
                }
            }else{
                t.project.exec {
                    executable "docker"
                    args "pull", "wnprcehr/ehrcron:"+branch
                }
            }
            
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadEhrcron -PbranchName=22.11_fb)'
        }
    }
    group 'Docker'
    description 'Download Docker Images from Docker Hub'
    dependsOn "checkDocker", "dockerLogin", "processbranchName"
}

tasks.register("downloadEhrcronPlug", DockerPullImage){
    image = "wnprcehr/ehrcronprod:${branchName}"
    
    onComplete{
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            println 'downloading image' 
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadEhrcronPlug -PbranchName=22.11_fb)'
        }
    }
    doLast{
        println "image pulled"     
    }
    group 'DockerPlugin' 
    dependsOn 'checkDocker'
}

tasks.register("downloadPostfix") { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String branchName = dockerStr.get()
            t.project.exec {
                executable "docker"
                args "pull", "wnprcehr/postfix:${branchName}"
            }
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadEhrcron -PbranchName=22.11_fb)'
        }
    }
    group 'Docker'
    description  'Download Docker Images from Docker Hub'
    dependsOn "checkDocker", "dockerLogin"
}

tasks.register("downloadPostfixPlug",DockerPullImage){
    image = "wnprcehr/postfix:${branchName}"
    
    onComplete{
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            println 'downloading image' 
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadPostfixPlug -PbranchName=22.11_fb)'
        }
    }
    doLast{
        println "image pulled"     
    }
    group 'DockerPlugin'
    dependsOn 'checkDocker'
}

tasks.register("downloadTomcat"){
    doLast {
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String branchName = dockerStr.get()
            t.project.exec {
                executable "docker"
                args "pull", "wnprcehr/tomcat:tomcat9_${branchName}"
            }
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadTomcat -PbranchName=22.11_fb)'
        }
    }
    group 'Docker'
    description  'Download Docker Images from Docker Hub'
    dependsOn "checkDocker", "dockerLogin"

}

tasks.register("downloadTomcatPlug",DockerPullImage){
    image = "wnprcehr/tomcat:tomcat9_${branchName}"
    
    onComplete{
        def dockerStr = providers.gradleProperty("branchName")
        if (dockerStr.present)
        {
            println 'downloading image' 
        }
        else{

            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadTomcatPlug -PbranchName=22.11_fb)'
        }
    }
    doLast{
        println "image pulled"     
    }
    group 'DockerPlugin'
    dependsOn 'checkDocker'
}

tasks.register("downloadAll"){
    group 'Docker'
    description 'Download all the docker images to ran LabKey/EHR'
    dependsOn "downloadLabkey", "downloadEhrcron", "downloadPostfix"

}

tasks.register("downloadAllPlug"){
    group 'Docker'
    description 'Download all the docker images to ran LabKey/EHR'
    dependsOn "downloadLabkeyPlug", "downloadEhrcronPlug", "downloadPostfixPlug"
}



tasks.register("up", Exec) {
    workingDir "$projectDir"
    executable "docker"
    args "compose", "up", "-d"
    environment CATALINA_OPTS: "-ea -Ddevmode=true"
    group 'Docker'
    description 'Starts the docker-compose environment (labkey + postgres)'
}

tasks.register("down", Exec) {
    workingDir "$projectDir"
    executable "docker"
    args "compose", "down"
    group 'Docker'
    description 'Shuts down the docker-compose environment (labkey + postgres)'
}

tasks.register("upSecondary", Exec) {
    workingDir "$projectDir/${directory}"
    executable "docker"
    args "compose", "up", "-d"
    environment CATALINA_OPTS: "-ea -Ddevmode=true"
    group 'Docker'
    description 'Starts the docker-compose environment (labkey + postgres)'
}


tasks.register("checkDocker") { 
  doLast{
    def OS = OperatingSystem.current()
    println OS.toString()
    
    if (OS.toString().contains("Mac")){
        exec {
            commandLine 'open', '-a', 'docker'
        }
    }else{
        exec{
             commandLine 'service', 'docker', 'status'
            //commandLine 'echo $sudo_password | sudo -S ' + tasks.privilegecheckDocker.commandLine.join(" ")
        }
    }
  }
    

    /* doLast{
        openDocker()
    } */
    
    /* doLast {
        if (standardOutput.toString().contains("ERROR")){
            println OperatingSystem.current()
            if (OperatingSystem.current().isMacOSX()){
                println "Opening Docker"
                t.project.exec {
                    executable "open"
                    args "-a" "Docker"
                }

            }else{
                println "Need to ran linux"
            }

        }
        
    } */
}

void openDocker(){
    def OS = OperatingSystem.current()
    println OS.toString()
    
    if (OS.toString().contains("Mac")){
        exec {
            commandLine 'open', '-a', 'docker'
        }
    }else{
        exec{
             commandLine 'service', 'docker', 'status'
            //commandLine 'echo $sudo_password | sudo -S ' + tasks.privilegecheckDocker.commandLine.join(" ")
        }
    }
}