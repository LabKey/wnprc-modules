apply plugin: 'idea'

idea.module {
    excludeDirs += file("data")
    excludeDirs += file("logs")
}

task("buildEhrcron", group: "Docker", type: Exec, description: "Generates the ehrcron docker image") {
    workingDir "$projectDir/ehrcron"
    executable "docker"
    args "build", ".", "-t", "wnprcehr/ehrcron:latest"
}

task("buildTomcat", group: "Docker", description: "Generates the Tomcat docker image (with R)") { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String dockerString = dockerStr.get()
            t.project.exec{
                workingDir "$projectDir/tomcat"
                executable "docker"
                args "build", ".", "-t", "wnprcehr/tomcat:tomcat9_${dockerString}"
            }
        }else {
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildTomcat -PdockerString=22.11_fb)'
        }
    }
}

task("buildLabkey", group: "Docker", description: "Generates the LabKey docker image", dependsOn: ["buildTomcat", "buildEhrcron", "buildPostfix"]) { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("dockerString")

        if (dockerStr.present){
            println dockerStr.get()
            String dockerString = dockerStr.get()
            if (project.hasProperty('labkeyTeamcityUsername') && project.hasProperty('labkeyTeamcityPassword')) {
                t.project.exec {
                    workingDir "$projectDir/labkey/hooks"
                    commandLine "./build"
                    environment = [ "teamcityUser": "${labkeyTeamcityUsername}", "teamCityPWD": "${labkeyTeamcityPassword}" ,  "DOCKER_TAG": dockerString ]
                }
            } else {
                logger.warn 'To build the LabKey image from TeamCity, you must specify a username and password in your ~/.gradle/gradle.properties file.'
            }
        } else {
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildLabkey -PdockerString=22.11_fb)'
        }
    }
}

task("buildPostfix", group: "Docker", type: Exec, description: "Generates the postfix docker image") {
    workingDir "$projectDir/postfix"
    executable "docker"
    args "build", ".", "-t", "wnprcehr/postfix:latest"
}

task("build", group: "Docker", description: "Generates all the docker images in the subfolders", dependsOn: [ "buildTomcat", "buildEhrcron", "buildLabkey", "buildPostfix" ] )

task("up", group: "Docker", type: Exec, description: "Starts the docker-compose environment (labkey + postgres)") {
    workingDir "$projectDir"
    executable "docker-compose"
    args "up", "-d"
    environment CATALINA_OPTS: "-ea -Ddevmode=true"
}

task("down", group: "Docker", type: Exec, description: "Shuts down the docker-compose environment (labkey + postgres)") {
    workingDir "$projectDir"
    executable "docker-compose"
    args "down"
}

task("downloadLabkey", group: "Docker", description: "Download Docker Images from Docker Hub") { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String dockerString = dockerStr.get()
            t.project.exec {
                workingDir "$projectDir/labkey/"
                executable "docker"
                args "pull", "wnprcehr/labkey:${dockerString}"
            }
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadLabkey -PdockerString=22.11_fb)'
        }
    }
}