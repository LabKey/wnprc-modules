plugins {
    id 'com.bmuschko.docker-remote-api' version '9.3.1'
}


//import org.gradle.nativeplatform.platform
import org.gradle.internal.os.OperatingSystem

// Import task types
import com.bmuschko.gradle.docker.tasks.image.*


apply plugin: 'idea'

idea.module {
    excludeDirs += file("data")
    excludeDirs += file("logs")
}

//Registering credential to use the bmuschko plugin to use docker
docker {
    url = 'unix:///var/run/docker.sock'
    registryCredentials {
        url = 'https://index.docker.io/v1/'
        username = "${dockerhubUsername}"
        password = "${dockerhubPassword}"
    }
}

//Login into Docker without using plugin
task ("dockerLogin", group: "Docker" , dependsOn: "checkDocker"){ Task t ->
    doLast {     
        if (project.hasProperty('dockerhubUsername') && project.hasProperty('dockerhubPassword')) {
            t.project.exec {
                commandLine "docker"
                args "login", "--username", "${dockerhubUsername}", "--password", "${dockerhubPassword}"
            }
        } else {
            logger.warn 'To download images from DockerHub, you must specify a username and password in your ~/.gradle/gradle.properties file.'
        }
    }
}

task("buildEhrCron", group: "Docker", type: Exec, description: "Generates the ehrcron docker image") {
    workingDir "$projectDir/ehrcron"
    executable "docker"
    args "build", ".", "-t", "wnprcehr/ehrcron:latest"
}

task("buildEhrCronPlug", group: "DockerPlugin", type:DockerBuildImage){
    inputDir.set(file("ehrcron/"))
    images.add("wnprcehr/ehrcron:latest")
}

task("buildTomcat", group: "Docker", description: "Generates the Tomcat docker image (with R)", dependsOn:[ "checkDocker", "dockerLogin"]) { Task t ->
    doLast {
        if (!project.hasProperty("nocache")){
            ext.nocache = "false"
        }
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String dockerString = dockerStr.get()
            println nocache
            if (nocache.equals("true")){
                println "building image without cache"
                t.project.exec{
                workingDir "$projectDir/tomcat"
                executable "docker"
                args "build", ".", "--no-cache", "-t", "wnprcehr/tomcat:tomcat9_${dockerString}"
                }
            }else{
                t.project.exec{
                workingDir "$projectDir/tomcat"
                executable "docker"
                args "build", ".", "-t", "wnprcehr/tomcat:tomcat9_${dockerString}"
                }
            }
            
        }else {
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildTomcat -PdockerString=22.11_fb)'
        }
    }
} 

task("buildTomcatPlug", group: "DockerPlugin", type: DockerBuildImage){
    def dockerStr = providers.gradleProperty("dockerString")
    if (dockerStr.present){
        println dockerStr.get()
        String dockerString = dockerStr.get()
        inputDir.set(file("tomcat/"))
        images.add("wnprcehr/tomcat:tomcat9_${dockerString}")

    }else {
        logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildTomcat -PdockerString=22.11_fb)'
    }
    
}

//Building LabKey with hooks/build for consistancy with Docker Hub and used of environment variables duirng the build process
//Source: https://stackoverflow.com/questions/36322536/how-to-set-an-environment-variable-from-a-gradle-build / https://stackoverflow.com/a/63140816
task("buildLabkey", group: "Docker", description: "Generates the LabKey docker image") { Task t ->
//task("buildLabkey", group: "Docker", description: "Generates the LabKey docker image", dependsOn: ["buildTomcat", "buildEhrCron", "buildPostfix"]) { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("dockerString")

        if (dockerStr.present){
            println dockerStr.get()
            String dockerString = dockerStr.get()
            if (project.hasProperty('labkeyTeamcityUsername') && project.hasProperty('labkeyTeamcityPassword')) {
                t.project.exec {
                    workingDir "$projectDir/labkey/hooks"
                    commandLine "./build"
                    environment += ['teamcityUser':"${labkeyTeamcityUsername}",'teamCityPWD':"${labkeyTeamcityPassword}",'DOCKER_TAG':"${dockerString}"]
                }
            } else {
                logger.warn 'To build the LabKey image from TeamCity, you must specify a username and password in your ~/.gradle/gradle.properties file.'
            }
        } else {
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew buildLabkey -PdockerString=22.11_fb_???)'
        }
    }
}

 task("buildPostfix", group: "Docker", type: Exec, description: "Generates the postfix docker image") {
    workingDir "$projectDir/postfix"
    executable "docker"
    args "build", ".", "-t", "wnprcehr/postfix:latest"
} 

task("buildPostfixPlug", group: "DockerPlugin", type:DockerBuildImage){
    inputDir.set(file("postfix/"))
    images.add("wnprcehr/postfix:latest")
}

task("build", group: "Docker", description: "Generates all the docker images in the subfolders", dependsOn: [ "buildTomcat", "buildEhrcron", "buildLabkey", "buildPostfix" ] )

//Two tasks to download LabKey from docker hub, first one does not use plugin
task("downloadLabkey", group: "Docker", description: "Download Docker Images from Docker Hub", dependsOn:[ "checkDocker", "dockerLogin" ]) { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String dockerString = dockerStr.get()
            t.project.exec {
                workingDir "$projectDir/labkey/"
                executable "docker"
                args "pull", "wnprcehr/labkeysnapshot:${dockerString}"
            }
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadLabkey -PdockerString=22.11_fb)'
        }
    }
}
task("downloadLabkeyPlug", group: "DockerPlugin", type: DockerPullImage, dependsOn: "checkDocker"){
    image = "wnprcehr/labkeysnapshot:${dockerString}"
    
    onComplete{
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println 'downloading image' 
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew dockerPullLabkey -PdockerString=22.11_fb)'
        }
    }
    doLast{
        println "image pulled"     
    }   
}

task("downloadEhrcron", group: "Docker", description: "Download Docker Images from Docker Hub", dependsOn:[ "checkDocker", "dockerLogin" ]) { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String dockerString = dockerStr.get()
            t.project.exec {
                executable "docker"
                args "pull", "wnprcehr/ehrcronprod:${dockerString}"
            }
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadEhrcron -PdockerString=22.11_fb)'
        }
    }
}

task("downloadEhrcronPlug", group: "DockerPlugin", type: DockerPullImage, dependsOn: "checkDocker"){
    image = "wnprcehr/ehrcronprod:${dockerString}"
    
    onComplete{
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println 'downloading image' 
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadEhrcronPlug -PdockerString=22.11_fb)'
        }
    }
    doLast{
        println "image pulled"     
    }   
}

task("downloadPostfix", group: "Docker", description: "Download Docker Images from Docker Hub", dependsOn:[ "checkDocker", "dockerLogin" ]) { Task t ->
    doLast {
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println dockerStr.get()
            String dockerString = dockerStr.get()
            t.project.exec {
                executable "docker"
                args "pull", "wnprcehr/postfix:${dockerString}"
            }
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadEhrcron -PdockerString=22.11_fb)'
        }
    }
}

task("downloadPostfixPlug", group: "DockerPlugin", type: DockerPullImage, dependsOn: "checkDocker"){
    image = "wnprcehr/postfix:${dockerString}"
    
    onComplete{
        def dockerStr = providers.gradleProperty("dockerString")
        if (dockerStr.present)
        {
            println 'downloading image' 
        }
        else{
            logger.warn 'Must provide docker string via command line. (ex. ./gradlew downloadEhrcronPlug -PdockerString=22.11_fb)'
        }
    }
    doLast{
        println "image pulled"     
    }   
}



task("downloadAll", group: "Docker", description: "Download all the docker images to ran LabKey/EHR", dependsOn: [ "downloadLabkey", "downloadEhrcron", "downloadPostfix" ] )

task("downloadAllPlug", group: "Docker", description: "Download all the docker images to ran LabKey/EHR", dependsOn: [ "downloadLabkeyPlug", "downloadEhrcronPlug", "downloadPostfixPlug" ] )



task("up", group: "Docker", type: Exec, description: "Starts the docker-compose environment (labkey + postgres)") {
    workingDir "$projectDir"
    executable "docker"
    args "compose", "up", "-d"
    environment CATALINA_OPTS: "-ea -Ddevmode=true"
}

task("down", group: "Docker", type: Exec, description: "Shuts down the docker-compose environment (labkey + postgres)") {
    workingDir "$projectDir"
    executable "docker"
    args "compose", "down"
}



task("privilegecheckDocker", type: Exec){
    commandLine 'service', 'docker', 'start'
}

task("checkDocker") { 
    doLast{
        openDocker()
    }
    
    /* doLast {
        if (standardOutput.toString().contains("ERROR")){
            println OperatingSystem.current()
            if (OperatingSystem.current().isMacOSX()){
                println "Opening Docker"
                t.project.exec {
                    executable "open"
                    args "-a" "Docker"
                }

            }else{
                println "Need to ran linux"
            }

        }
        
    } */
}

void openDocker(){
    def OS = OperatingSystem.current()
    println OS.toString()
    
    if (OS.toString().contains("Mac")){
        exec {
            commandLine 'open', '-a', 'docker'
        }
    }else{
        exec{
            commandLine 'echo $sudo_password | sudo -S ' + tasks.privilegecheckDocker.commandLine.join(" ")
        }

    }
}

